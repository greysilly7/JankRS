# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.
{
  nixpkgs ? <nixpkgs>,
  pkgs ? import nixpkgs {config = {};},
  lib ? pkgs.lib,
  stdenv ? pkgs.stdenv,
  buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate,
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
  defaultCrateOverrides ? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures ? ["default"],
  # If true, throw errors instead of issueing deprecation warnings.
  strictDeprecation ? false,
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
  targetFeatures ? [],
  # Whether to perform release builds: longer compile times, faster binaries.
  release ? true,
  # Additional crate2nix configuration if it exists.
  crateConfig ?
    if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {},
}: rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "jank_rs";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate {inherit packageId;};
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "jank_rs" = rec {
      packageId = "jank_rs";
      build = internal.buildRustCrateWithFeatures {
        packageId = "jank_rs";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate {inherit packageId;};
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths = let
      members = builtins.attrValues workspaceMembers;
    in
      builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = ["read"];
          }
        ];
        features = {
          "all" = ["bin"];
          "alloc" = ["dep:alloc"];
          "bin" = ["loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "cpp_demangle" = ["dep:cpp_demangle"];
          "default" = ["rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec"];
          "fallible-iterator" = ["dep:fallible-iterator"];
          "loader" = ["std" "dep:object" "dep:memmap2" "dep:typed-arena"];
          "rustc-demangle" = ["dep:rustc-demangle"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std"];
          "smallvec" = ["dep:smallvec"];
          "std" = ["gimli/std"];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "perf-literal"];
          "logging" = ["dep:log"];
          "perf-literal" = ["dep:memchr"];
          "std" = ["memchr?/std"];
        };
        resolvedDefaultFeatures = ["default" "perf-literal" "std"];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];
      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0xl4zqncrdmw2g6241wgr11dxdg4h7byy6bz3l6si03qyfk72nhb";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0kaplfb5axsvf1gfs2gk6c4zx6zcsns0yf3ssk7iwni7bphlvhn7";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full" "visit-mut"];
          }
        ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.83";
        edition = "2021";
        sha256 = "1p8q8gm4fv2fdka8hwy2w3f8df7p5inixqi7rlmbnky3wmysw73j";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = ["full" "parsing" "printing" "proc-macro" "visit-mut"];
          }
        ];
      };
      "async_io_stream" = rec {
        crateName = "async_io_stream";
        version = "0.3.3";
        edition = "2021";
        sha256 = "0k5rv51935p3il74q59hwaaid6sy9kv05vz3lw48jpgkrpgbkmxn";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pharos";
            packageId = "pharos";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "map_pharos" = ["pharos"];
          "pharos" = ["dep:pharos"];
          "tokio" = ["dep:tokio"];
          "tokio_io" = ["tokio"];
        };
        resolvedDefaultFeatures = ["map_pharos" "pharos"];
      };
      "atomic 0.5.3" = rec {
        crateName = "atomic";
        version = "0.5.3";
        edition = "2018";
        sha256 = "1fhc6ayg4d5vw1cibqwff15d45fc5448zg9i3drk42k5phsdp6y5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "default" = ["fallback"];
        };
        resolvedDefaultFeatures = ["default" "fallback"];
      };
      "atomic 0.6.0" = rec {
        crateName = "atomic";
        version = "0.6.0";
        edition = "2018";
        sha256 = "15193mfhmrq3p6vi1a10hw3n6kvzf5h32zikhby3mdj0ww1q10cd";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
        ];
        devDependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = ["derive"];
          }
        ];
        features = {
          "default" = ["fallback"];
        };
        resolvedDefaultFeatures = ["default" "fallback"];
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.4.0";
        edition = "2015";
        sha256 = "09lz3by90d2hphbq56znag9v87gfpd9gb8nr82hll8z6x2nhprdc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.74";
        edition = "2021";
        sha256 = "06pfif7nwx66qf2zaanc2fcq7m64i91ki9imw9xd3bnz5hrwp0ld";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = ["read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive"];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "cpp_demangle" = ["dep:cpp_demangle"];
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "serialize-serde" = ["serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "base64 0.13.1" = rec {
        crateName = "base64";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1s494mqmzjb766fy1kqlccgfg2sdcjb6hzbvzqv2jw65fdi5h6wy";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "binascii" = rec {
        crateName = "binascii";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0wnaglgl72pn5ilv61q6y34w76gbg7crb8ifqk6lsxnq2gajjg9q";
        authors = [
          "Naim A. <naim@abda.nl>"
        ];
        features = {
          "default" = ["encode" "decode"];
        };
        resolvedDefaultFeatures = ["decode" "default" "encode"];
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "bitflags 2.6.0" = rec {
        crateName = "bitflags";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1pkidwzn3hnxlsl8zizh0bncgbjnw7c41cx7bby26ncbzmiznj5h";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "bytemuck" = ["dep:bytemuck"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["serde" "std"];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "1.10.0";
        edition = "2021";
        sha256 = "036wwrchd5gq3q4k6w1j2bfl2bk2ff8c0dsa9y7w7aw7nf7knwj0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["memchr/alloc" "serde?/alloc"];
          "default" = ["std" "unicode"];
          "serde" = ["dep:serde"];
          "std" = ["alloc" "memchr/std" "serde?/std"];
          "unicode" = ["dep:regex-automata"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.16.0";
        edition = "2021";
        sha256 = "0b015qb4knwanbdlp1x48pkb4pm57b8gidbhhhxr900q2wb6fabr";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = ["dep:allocator-api2"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.19.0";
        edition = "2018";
        sha256 = "0ka96agz9kqmsd71q7xpr08bnh2g8x4hivxqpnks0674h5dj2d43";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
          "bytemuck_derive" = ["dep:bytemuck_derive"];
          "derive" = ["bytemuck_derive"];
          "extern_crate_std" = ["extern_crate_alloc"];
          "latest_stable_rust" = ["aarch64_simd" "align_offset" "const_zeroed" "derive" "min_const_generics" "must_cast" "track_caller" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit"];
        };
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.8.0";
        edition = "2018";
        sha256 = "1nnhpb7jlpj393qnjr1n9n6sgpl3w5ymrwl3pnjmrriam861bh4s";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.1.31";
        edition = "2018";
        sha256 = "0vscf59yxf665s4fv9yn3l39gfw99mgp6wnbc76cyv80ahmrdry2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = ["dep:libc" "dep:jobserver"];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "chorus" = rec {
        crateName = "chorus";
        version = "0.17.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/polyphony-chat/chorus.git";
          rev = "7460d3fb1be5f153bb8e76dbec6b63b600ae0baf";
          sha256 = "0nym9j9rh8fd0rpj9x0xhv01hcqpb4iwpadrvkvr7qgjwwc2vgm8";
        };
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            features = ["serde"];
          }
          {
            name = "chorus-macros";
            packageId = "chorus-macros";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = ["serde"];
          }
          {
            name = "custom_error";
            packageId = "custom_error";
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["js"];
          }
          {
            name = "hostname";
            packageId = "hostname";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "jsonwebtoken";
            packageId = "jsonwebtoken";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pubserve";
            packageId = "pubserve";
            features = ["async" "send"];
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = ["multipart" "json" "rustls-tls-webpki-roots"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "serde-aux";
            packageId = "serde-aux";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = ["raw_value"];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["macros" "sync"];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["rustls-tls-webpki-roots"];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasmtimer";
            packageId = "wasmtimer";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.6";
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "backend" = ["poem" "sqlx" "sqlx-pg-uint"];
          "client" = ["flate2"];
          "default" = ["client" "rt-multi-thread"];
          "flate2" = ["dep:flate2"];
          "poem" = ["dep:poem"];
          "rt" = ["tokio/rt"];
          "rt-multi-thread" = ["tokio/rt-multi-thread"];
          "sqlx" = ["dep:sqlx"];
          "sqlx-pg-uint" = ["dep:sqlx-pg-uint" "sqlx-pg-uint/serde"];
          "voice" = ["voice_udp" "voice_gateway"];
          "voice_udp" = ["dep:discortp" "dep:crypto_secretbox"];
        };
        resolvedDefaultFeatures = ["client" "default" "flate2" "rt-multi-thread"];
      };
      "chorus-macros" = rec {
        crateName = "chorus-macros";
        version = "0.5.0";
        edition = "2021";
        workspace_member = null;
        src = "${pkgs.fetchgit {
          url = "https://github.com/polyphony-chat/chorus.git";
          rev = "7460d3fb1be5f153bb8e76dbec6b63b600ae0baf";
          sha256 = "0nym9j9rh8fd0rpj9x0xhv01hcqpb4iwpadrvkvr7qgjwwc2vgm8";
        }}/src";
        procMacro = true;
        libName = "chorus_macros";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.38";
        edition = "2021";
        sha256 = "009l8vc5p8750vn02z30mblg4pv2qhkbfizhfwmzc6vpy5nr67x2";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = {
              target,
              features,
            }: (target."unix" or false);
            features = ["fallback"];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = ["dep:android-tzdata"];
          "arbitrary" = ["dep:arbitrary"];
          "clock" = ["winapi" "iana-time-zone" "android-tzdata" "now"];
          "default" = ["clock" "std" "oldtime" "wasmbind"];
          "iana-time-zone" = ["dep:iana-time-zone"];
          "js-sys" = ["dep:js-sys"];
          "now" = ["std"];
          "pure-rust-locales" = ["dep:pure-rust-locales"];
          "rkyv" = ["dep:rkyv" "rkyv/size_32"];
          "rkyv-16" = ["dep:rkyv" "rkyv?/size_16"];
          "rkyv-32" = ["dep:rkyv" "rkyv?/size_32"];
          "rkyv-64" = ["dep:rkyv" "rkyv?/size_64"];
          "rkyv-validation" = ["rkyv?/validation"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
          "unstable-locales" = ["pure-rust-locales"];
          "wasm-bindgen" = ["dep:wasm-bindgen"];
          "wasmbind" = ["wasm-bindgen" "js-sys"];
          "winapi" = ["windows-targets"];
          "windows-targets" = ["dep:windows-targets"];
        };
        resolvedDefaultFeatures = ["alloc" "android-tzdata" "clock" "default" "iana-time-zone" "js-sys" "now" "oldtime" "serde" "std" "wasm-bindgen" "wasmbind" "winapi" "windows-targets"];
      };
      "chrono-tz" = rec {
        crateName = "chrono-tz";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1fvicqrlmdsjkrgxr7bxfd62i9w2qi2b6iv4w85av5syvqlqnsck";
        libName = "chrono_tz";
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "phf";
            packageId = "phf";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "chrono-tz-build";
            packageId = "chrono-tz-build";
          }
        ];
        devDependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "case-insensitive" = ["dep:uncased" "chrono-tz-build/case-insensitive" "phf/uncased"];
          "default" = ["std"];
          "filter-by-regex" = ["chrono-tz-build/filter-by-regex"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "chrono-tz-build" = rec {
        crateName = "chrono-tz-build";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1c8ixwwwsn9kgs1dr5mz963p0fgw9j9p7fzb3w2c7y8xhkp8l20c";
        libName = "chrono_tz_build";
        dependencies = [
          {
            name = "parse-zoneinfo";
            packageId = "parse-zoneinfo";
          }
          {
            name = "phf";
            packageId = "phf";
            usesDefaultFeatures = false;
          }
          {
            name = "phf_codegen";
            packageId = "phf_codegen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "case-insensitive" = ["uncased" "phf/uncased"];
          "filter-by-regex" = ["regex"];
          "regex" = ["dep:regex"];
          "uncased" = ["dep:uncased"];
        };
      };
      "cookie" = rec {
        crateName = "cookie";
        version = "0.18.1";
        edition = "2018";
        sha256 = "0iy749flficrlvgr3hjmf3igr738lk81n5akzf4ym4cs6cxg7pjd";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = ["std" "parsing" "formatting" "macros"];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "aes-gcm" = ["dep:aes-gcm"];
          "base64" = ["dep:base64"];
          "hkdf" = ["dep:hkdf"];
          "hmac" = ["dep:hmac"];
          "key-expansion" = ["sha2" "hkdf"];
          "percent-encode" = ["percent-encoding"];
          "percent-encoding" = ["dep:percent-encoding"];
          "private" = ["aes-gcm" "base64" "rand" "subtle"];
          "rand" = ["dep:rand"];
          "secure" = ["private" "signed" "key-expansion"];
          "sha2" = ["dep:sha2"];
          "signed" = ["hmac" "sha2" "base64" "rand" "subtle"];
          "subtle" = ["dep:subtle"];
        };
        resolvedDefaultFeatures = ["percent-encode" "percent-encoding"];
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "default" = ["link"];
          "link" = ["core-foundation-sys/link"];
          "mac_os_10_7_support" = ["core-foundation-sys/mac_os_10_7_support"];
          "mac_os_10_8_features" = ["core-foundation-sys/mac_os_10_8_features"];
          "uuid" = ["dep:uuid"];
          "with-chrono" = ["chrono"];
          "with-uuid" = ["uuid"];
        };
        resolvedDefaultFeatures = ["default" "link"];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = ["link"];
        };
        resolvedDefaultFeatures = ["default" "link"];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.14";
        edition = "2018";
        sha256 = "1q3qd9qkw94vs7n5i0y3zz2cqgzcxvdgyb54ryngwmjhfbgrg1k0";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1czp7vif73b8xslr3c9yxysmh9ws2r8824qda7j47ffs9pcnjxx9";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.13";
        edition = "2021";
        sha256 = "1wkx45r34v7g3wyi3lg2wz536lrrrab4h4hh741shfhr8rlhsj1k";
        libName = "crossbeam_channel";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.5";
        edition = "2021";
        sha256 = "03bp38ljx4wj6vvy4fbhx41q8f585zyqix6pncz1mkz93z08qgv1";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["crossbeam-epoch/std" "crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "loom" = ["loom-crate" "crossbeam-utils/loom"];
          "loom-crate" = ["dep:loom-crate"];
          "nightly" = ["crossbeam-utils/nightly"];
          "std" = ["alloc" "crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.20";
        edition = "2021";
        sha256 = "100fksq5mm1n7zj242cclkw6yf7a4a8ix3lvpfkhxvdhbda9kv12";
        libName = "crossbeam_utils";
        features = {
          "default" = ["std"];
          "loom" = ["dep:loom"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = ["more_lengths"];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = ["rand_core/getrandom"];
          "rand_core" = ["dep:rand_core"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "custom_error" = rec {
        crateName = "custom_error";
        version = "1.9.2";
        edition = "2018";
        sha256 = "19mwa90z1hgwn3mqj07b4cy6j4yc8c59k2n99mdvm9kz37fm32jg";
        authors = [
          "lovasoa"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1299h2z88qn71mizhh05j26yr3ik0wnqmw11ijds89l8i9nbhqvg";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = ["suggestions"];
          "diagnostics" = ["darling_core/diagnostics"];
          "suggestions" = ["darling_core/suggestions"];
        };
        resolvedDefaultFeatures = ["default" "suggestions"];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1rgr9nci61ahnim93yh3xy6fkfayh7sk4447hahawah3m1hkh4wm";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full" "extra-traits"];
          }
        ];
        features = {
          "strsim" = ["dep:strsim"];
          "suggestions" = ["strsim"];
        };
        resolvedDefaultFeatures = ["strsim" "suggestions"];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.10";
        edition = "2021";
        sha256 = "01kq3ibbn47czijj39h3vxyw0c2ksd0jvc097smcrk7n2jjs4dnk";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.6.0";
        edition = "2018";
        sha256 = "1qnn68n4vragxaxlkqcb1r28d3hhj43wch67lm4rpxlw89wnjmp8";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.3.11";
        edition = "2021";
        sha256 = "1d1ibqqnr5qdrpw8rclwrf1myn3wf0dygl04idf4j2s49ah6yaxl";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "num" = ["dep:num-traits"];
          "powerfmt" = ["dep:powerfmt"];
          "quickcheck" = ["dep:quickcheck" "alloc"];
          "rand" = ["dep:rand"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "powerfmt" "serde" "std"];
      };
      "deunicode" = rec {
        crateName = "deunicode";
        version = "1.6.0";
        edition = "2021";
        sha256 = "006gnml4jy3m03yqma8qvx7kl9i2bw667za9f7yc6k9ckv64959k";
        authors = [
          "Kornel Lesinski <kornel@geekhood.net>"
          "Amit Chowdhury <amitc97@gmail.com>"
        ];
        features = {
          "default" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "devise" = rec {
        crateName = "devise";
        version = "0.4.2";
        edition = "2015";
        sha256 = "07b5dza9dl5p15q32xng8pgmmhf7kbjpng2y46njqykp9h60pngi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "devise_codegen";
            packageId = "devise_codegen";
          }
          {
            name = "devise_core";
            packageId = "devise_core";
          }
        ];
      };
      "devise_codegen" = rec {
        crateName = "devise_codegen";
        version = "0.4.2";
        edition = "2015";
        sha256 = "0ryq9xibibjf82xhr26civsw7bg6id8j4j9kl9qaa5xyv208dcki";
        procMacro = true;
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "devise_core";
            packageId = "devise_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
      };
      "devise_core" = rec {
        crateName = "devise_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1xwa9dp1i66zwfywgvz4189gxzpbpanagmf4wgr03gvsrx1aaddh";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "proc-macro2-diagnostics";
            packageId = "proc-macro2-diagnostics";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full" "parsing" "extra-traits" "visit-mut"];
          }
        ];
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
        ];
        features = {
          "blobby" = ["dep:blobby"];
          "block-buffer" = ["dep:block-buffer"];
          "const-oid" = ["dep:const-oid"];
          "core-api" = ["block-buffer"];
          "default" = ["core-api"];
          "dev" = ["blobby"];
          "mac" = ["subtle"];
          "oid" = ["const-oid"];
          "rand_core" = ["crypto-common/rand_core"];
          "std" = ["alloc" "crypto-common/std"];
          "subtle" = ["dep:subtle"];
        };
        resolvedDefaultFeatures = ["alloc" "block-buffer" "core-api" "default" "std"];
      };
      "either" = rec {
        crateName = "either";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1w2c1mybrd7vljyxk77y9f4w9dyjrmp3yp82mk7bcm8848fazcb0";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["use_std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "use_std"];
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.35";
        edition = "2018";
        sha256 = "1wv64xdrr9v37rqqdjsyb8l8wzlcbab80ryxhrszvnj59wy0y0vm";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = ["dep:any_all_workaround"];
          "default" = ["alloc"];
          "fast-legacy-encode" = ["fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode"];
          "serde" = ["dep:serde"];
          "simd-accel" = ["any_all_workaround"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";
      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.9";
        edition = "2018";
        sha256 = "1fi0m0493maq1jygcf1bya9cymz2pc1mqxj26bdv7yjd37v5qk2k";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_System_Diagnostics_Debug"];
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["libc/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.1.1";
        edition = "2018";
        sha256 = "19nyzdq3ha4g173364y2wijmd6jlyms8qx40daqkxsnl458jmh78";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "getrandom" = ["dep:getrandom"];
          "js" = ["std" "getrandom"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "figment" = rec {
        crateName = "figment";
        version = "0.10.19";
        edition = "2018";
        sha256 = "1ww9sxdzjj2i80w7bq0kllnymjyrfb1cdx2h70ap5wqcdga1rc4c";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "atomic";
            packageId = "atomic 0.6.0";
            target = {
              target,
              features,
            }: (("8" == target."pointer_width" or null) || ("16" == target."pointer_width" or null) || ("32" == target."pointer_width" or null));
          }
          {
            name = "pear";
            packageId = "pear";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "toml";
            packageId = "toml";
            optional = true;
          }
          {
            name = "uncased";
            packageId = "uncased";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "env" = ["pear" "parse-value"];
          "json" = ["serde_json"];
          "parking_lot" = ["dep:parking_lot"];
          "parse-value" = ["pear"];
          "pear" = ["dep:pear"];
          "serde_json" = ["dep:serde_json"];
          "serde_yaml" = ["dep:serde_yaml"];
          "tempfile" = ["dep:tempfile"];
          "test" = ["tempfile" "parking_lot"];
          "toml" = ["dep:toml"];
          "yaml" = ["serde_yaml"];
        };
        resolvedDefaultFeatures = ["env" "parse-value" "pear" "toml"];
      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.25";
        edition = "2018";
        sha256 = "11l5zr86n5sr6g6k6sqldswk0jzklm0q95rzikxcns0yk0p55h1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "libredox";
            packageId = "libredox";
            target = {
              target,
              features,
            }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Storage_FileSystem"];
          }
        ];
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.34";
        edition = "2018";
        sha256 = "1w1nf2ap4q1sq1v6v951011wcvljk449ap7q7jnnjf8hvjs8kdd1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = ["with-alloc"];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = ["with-alloc"];
          }
        ];
        features = {
          "any_zlib" = ["any_impl"];
          "cloudflare-zlib-sys" = ["dep:cloudflare-zlib-sys"];
          "cloudflare_zlib" = ["any_zlib" "cloudflare-zlib-sys"];
          "default" = ["rust_backend"];
          "libz-ng-sys" = ["dep:libz-ng-sys"];
          "libz-rs-sys" = ["dep:libz-rs-sys"];
          "libz-sys" = ["dep:libz-sys"];
          "miniz-sys" = ["rust_backend"];
          "miniz_oxide" = ["dep:miniz_oxide"];
          "rust_backend" = ["miniz_oxide" "any_impl"];
          "zlib" = ["any_zlib" "libz-sys"];
          "zlib-default" = ["any_zlib" "libz-sys/default"];
          "zlib-ng" = ["any_zlib" "libz-ng-sys"];
          "zlib-ng-compat" = ["zlib" "libz-sys/zlib-ng"];
          "zlib-rs" = ["any_zlib" "libz-rs-sys"];
        };
        resolvedDefaultFeatures = ["any_impl" "default" "miniz_oxide" "rust_backend"];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["percent-encoding/alloc"];
          "default" = ["std"];
          "std" = ["alloc" "percent-encoding/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "fsevent-sys" = rec {
        crateName = "fsevent-sys";
        version = "4.1.0";
        edition = "2018";
        sha256 = "1liz67v8b0gcs8r31vxkvm2jzgl9p14i78yfqx81c8sdv817mvkn";
        libName = "fsevent_sys";
        authors = [
          "Pierre Baillet <pierre@baillet.name>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["sink"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["sink"];
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc"];
          "async-await" = ["futures-util/async-await" "futures-util/async-await-macro"];
          "bilock" = ["futures-util/bilock"];
          "compat" = ["std" "futures-util/compat"];
          "default" = ["std" "async-await" "executor"];
          "executor" = ["std" "futures-executor/std"];
          "futures-executor" = ["dep:futures-executor"];
          "io-compat" = ["compat" "futures-util/io-compat"];
          "std" = ["alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel"];
          "thread-pool" = ["executor" "futures-executor/thread-pool"];
          "unstable" = ["futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable"];
          "write-all-vectored" = ["futures-util/write-all-vectored"];
        };
        resolvedDefaultFeatures = ["alloc" "async-await" "default" "executor" "futures-executor" "std"];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc"];
          "default" = ["std"];
          "futures-sink" = ["dep:futures-sink"];
          "sink" = ["futures-sink"];
          "std" = ["alloc" "futures-core/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "futures-sink" "sink" "std"];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = ["std"];
          "portable-atomic" = ["dep:portable-atomic"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "num_cpus" = ["dep:num_cpus"];
          "std" = ["futures-core/std" "futures-task/std" "futures-util/std"];
          "thread-pool" = ["std" "num_cpus"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
        ];
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc" "futures-task/alloc"];
          "async-await-macro" = ["async-await" "futures-macro"];
          "channel" = ["std" "futures-channel"];
          "compat" = ["std" "futures_01"];
          "default" = ["std" "async-await" "async-await-macro"];
          "futures-channel" = ["dep:futures-channel"];
          "futures-io" = ["dep:futures-io"];
          "futures-macro" = ["dep:futures-macro"];
          "futures-sink" = ["dep:futures-sink"];
          "futures_01" = ["dep:futures_01"];
          "io" = ["std" "futures-io" "memchr"];
          "io-compat" = ["io" "compat" "tokio-io"];
          "memchr" = ["dep:memchr"];
          "portable-atomic" = ["futures-core/portable-atomic"];
          "sink" = ["futures-sink"];
          "slab" = ["dep:slab"];
          "std" = ["alloc" "futures-core/std" "futures-task/std" "slab"];
          "tokio-io" = ["dep:tokio-io"];
          "unstable" = ["futures-core/unstable" "futures-task/unstable"];
          "write-all-vectored" = ["io"];
        };
        resolvedDefaultFeatures = ["alloc" "async-await" "async-await-macro" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std"];
      };
      "generator" = rec {
        crateName = "generator";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0knp7cllkf90l4wmfbhmb3c0ha9xn9afrzmphain1d12zy26bhaw";
        authors = [
          "Xudong Huang <huangxu008@hotmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "windows";
            packageId = "windows";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_System_Memory" "Win32_Foundation" "Win32_System_SystemInformation" "Win32_System_Diagnostics_Debug"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["more_lengths"];
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1mzlnrb3dgyd1fb84gvw10pyr8wdqdl4ry4sr64i1s8an66pqmn4";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "js" = ["wasm-bindgen" "js-sys"];
          "js-sys" = ["dep:js-sys"];
          "rustc-dep-of-std" = ["compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std"];
          "wasm-bindgen" = ["dep:wasm-bindgen"];
        };
        resolvedDefaultFeatures = ["js" "js-sys" "std" "wasm-bindgen"];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = ["read-all" "write"];
          "endian-reader" = ["read" "dep:stable_deref_trait"];
          "fallible-iterator" = ["dep:fallible-iterator"];
          "read" = ["read-core"];
          "read-all" = ["read" "std" "fallible-iterator" "endian-reader"];
          "rustc-dep-of-std" = ["dep:core" "dep:alloc" "dep:compiler_builtins"];
          "std" = ["fallible-iterator?/std" "stable_deref_trait?/std"];
          "write" = ["dep:indexmap"];
        };
        resolvedDefaultFeatures = ["read" "read-core"];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.1";
        edition = "2015";
        sha256 = "16zca52nglanv23q5qrwd5jinw3d3as5ylya6y1pbx47vkxvrynj";
        authors = [
          "The Rust Project Developers"
        ];
      };
      "globset" = rec {
        crateName = "globset";
        version = "0.4.15";
        edition = "2021";
        sha256 = "06gv8a5mg5q724lhdq4hp6zmv923whzm7mgpkghz3rs6crlcxw8m";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
          }
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.8";
            usesDefaultFeatures = false;
            features = ["std" "perf" "syntax" "meta" "nfa" "hybrid"];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
            features = ["std"];
          }
        ];
        features = {
          "default" = ["log"];
          "log" = ["dep:log"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde"];
        };
        resolvedDefaultFeatures = ["default" "log"];
      };
      "globwalk" = rec {
        crateName = "globwalk";
        version = "0.9.1";
        edition = "2021";
        sha256 = "0mz7bsa66p2rrgnz3l94ac4kbklh7mq8j30iizyxjy4qyvmn1xqb";
        authors = [
          "Gilad Naaman <gilad@naaman.io>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "ignore";
            packageId = "ignore";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
      };
      "h2" = rec {
        crateName = "h2";
        version = "0.3.26";
        edition = "2018";
        sha256 = "1s7msnfv7xprzs6xzfj5sg6p8bjcdpcqcmjjbkd345cyi1x55zl1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.6.0";
            features = ["std"];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["codec" "io"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["rt-multi-thread" "macros" "sync" "net"];
          }
        ];
        features = {
        };
      };
      "handlebars" = rec {
        crateName = "handlebars";
        version = "5.1.2";
        edition = "2021";
        crateBin = [];
        sha256 = "16skfw1kzkn188zv6plhrmiw1mjayy6d9f6iwklr6qqfdawqb16h";
        authors = [
          "Ning Sun <sunng@pm.me>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "dir_source" = ["walkdir"];
          "heck" = ["dep:heck"];
          "rhai" = ["dep:rhai"];
          "rust-embed" = ["dep:rust-embed"];
          "script_helper" = ["rhai"];
          "string_helpers" = ["heck"];
          "walkdir" = ["dep:walkdir"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "ahash-compile-time-rng" = ["ahash/compile-time-rng"];
          "alloc" = ["dep:alloc"];
          "bumpalo" = ["dep:bumpalo"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["ahash" "inline-more"];
          "rayon" = ["dep:rayon"];
          "rustc-dep-of-std" = ["nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["raw"];
      };
      "hashbrown 0.15.0" = rec {
        crateName = "hashbrown";
        version = "0.15.0";
        edition = "2021";
        sha256 = "1yx4xq091s7i6mw6bn77k8cp4jrpcac149xr32rg8szqsj27y20y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "allocator-api2" = ["dep:allocator-api2"];
          "borsh" = ["dep:borsh"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry"];
          "default-hasher" = ["dep:foldhash"];
          "equivalent" = ["dep:equivalent"];
          "nightly" = ["allocator-api2?/nightly" "bumpalo/allocator_api"];
          "rayon" = ["dep:rayon"];
          "rustc-dep-of-std" = ["nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" "raw-entry"];
          "serde" = ["dep:serde"];
        };
      };
      "hermit-abi 0.3.9" = rec {
        crateName = "hermit-abi";
        version = "0.3.9";
        edition = "2021";
        sha256 = "092hxjbjnq5fmz66grd9plxd0sh6ssg5fhgwwwqbrzgzkjwdycfj";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins/rustc-dep-of-std"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "hermit-abi 0.4.0" = rec {
        crateName = "hermit-abi";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k1zwllx6nfq417hy38x4akw1ivlv68ymvnzyxs76ffgsqcskxpv";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins/rustc-dep-of-std"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "hostname" = rec {
        crateName = "hostname";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0rz8yf70cvzl3nry71m4bz9w6x4j9kdz3qng6pnwhk2h20z1qwrw";
        authors = [
          "fengcen <fengcen.love@gmail.com>"
          "svartalf <self@svartalf.info>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("redox" == target."os" or null));
          }
          {
            name = "match_cfg";
            packageId = "match_cfg";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["sysinfoapi"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "http 0.2.12" = rec {
        crateName = "http";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1w81s4bcbmcj9bjp7mllm8jlz6b31wzvirz8bgpzbqkpwmbvn730";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
      };
      "http 1.1.0" = rec {
        crateName = "http";
        version = "1.1.0";
        edition = "2018";
        sha256 = "0n426lmcxas6h75c2cp25m933pswlrfjz10v91vc62vib2sdvf91";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "0.4.6";
        edition = "2018";
        sha256 = "1lmyjfk6bqk6k9gkn1dxq770sb78pqbqshga241hr5p995bb5skw";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.9.5";
        edition = "2018";
        sha256 = "0ip9v8m9lvgvq1lznl31wvn0ch1v254na7lhid9p29yx9rbx6wbx";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];
      };
      "humansize" = rec {
        crateName = "humansize";
        version = "2.1.3";
        edition = "2021";
        sha256 = "1msxd1akb3dydsa8qs461sds9krwnn31szvqgaq93p4x0ad1rdbc";
        authors = [
          "Leopold Arkham <leopold.arkham@gmail.com>"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
          }
        ];
        features = {
        };
      };
      "hyper" = rec {
        crateName = "hyper";
        version = "0.14.31";
        edition = "2018";
        sha256 = "11bf6mqcpzi0x2758p7q9zk3m877avzpbiw8nx8v2dd3iwp3024c";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = ["all"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["fs" "macros" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util"];
          }
        ];
        features = {
          "ffi" = ["libc"];
          "full" = ["client" "http1" "http2" "server" "stream" "runtime"];
          "h2" = ["dep:h2"];
          "http2" = ["h2"];
          "libc" = ["dep:libc"];
          "runtime" = ["tcp" "tokio/rt" "tokio/time"];
          "socket2" = ["dep:socket2"];
          "tcp" = ["socket2" "tokio/net" "tokio/rt" "tokio/time"];
        };
        resolvedDefaultFeatures = ["client" "h2" "http1" "http2" "runtime" "server" "socket2" "stream" "tcp"];
      };
      "hyper-rustls" = rec {
        crateName = "hyper-rustls";
        version = "0.24.2";
        edition = "2021";
        sha256 = "1475j4a2nczz4aajzzsq3hpwg1zacmzbqg393a14j80ff8izsgpc";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            features = ["client"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper";
            features = ["full"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = ["tls12"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-std" "macros" "net" "rt-multi-thread"];
          }
        ];
        features = {
          "acceptor" = ["hyper/server" "tokio-runtime"];
          "default" = ["native-tokio" "http1" "tls12" "logging" "acceptor"];
          "http1" = ["hyper/http1"];
          "http2" = ["hyper/http2"];
          "log" = ["dep:log"];
          "logging" = ["log" "tokio-rustls/logging" "rustls/logging"];
          "native-tokio" = ["tokio-runtime" "rustls-native-certs"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "tls12" = ["tokio-rustls/tls12" "rustls/tls12"];
          "tokio-runtime" = ["hyper/runtime"];
          "webpki-roots" = ["dep:webpki-roots"];
          "webpki-tokio" = ["tokio-runtime" "webpki-roots"];
        };
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.61";
        edition = "2018";
        sha256 = "085jjsls330yj1fnwykfzmb2f10zp6l7w4fhq81ng81574ghhpi3";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = {
              target,
              features,
            }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = {
              target,
              features,
            }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["fallback"];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1xhjrcjqq0l5bpzvdgylvpkgk94panxgsirzhjnnqfdgc4a9nkb3";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
            usesDefaultFeatures = false;
            features = ["hardcoded-data"];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc" "unicode-bidi/std" "unicode-normalization/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "ignore" = rec {
        crateName = "ignore";
        version = "0.4.23";
        edition = "2021";
        sha256 = "0jysggjfmlxbg60vhhiz4pb8jfb7cnq5swdsvxknbs7x18wgv2bd";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "globset";
            packageId = "globset";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.8";
            usesDefaultFeatures = false;
            features = ["std" "perf" "syntax" "meta" "nfa" "hybrid" "dfa-onepass"];
          }
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
        };
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = ["raw"];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "quickcheck" = ["dep:quickcheck"];
          "rayon" = ["dep:rayon"];
          "rustc-rayon" = ["dep:rustc-rayon"];
          "serde" = ["dep:serde"];
          "serde-1" = ["serde"];
        };
        resolvedDefaultFeatures = ["serde" "serde-1" "std"];
      };
      "indexmap 2.6.0" = rec {
        crateName = "indexmap";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1nmrwn8lbs19gkvhxaawffzbvrpyrb5y3drcrr645x957kz0fybh";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.0";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "borsh" = ["dep:borsh"];
          "default" = ["std"];
          "quickcheck" = ["dep:quickcheck"];
          "rayon" = ["dep:rayon"];
          "rustc-rayon" = ["dep:rustc-rayon"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "inlinable_string" = rec {
        crateName = "inlinable_string";
        version = "0.1.15";
        edition = "2018";
        sha256 = "1ysjci8yfvxgf51z0ny2nnwhxrclhmb3vbngin8v4bznhr3ybyn8";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "inotify" = rec {
        crateName = "inotify";
        version = "0.9.6";
        edition = "2018";
        sha256 = "1zxb04c4qccp8wnr3v04l503qpxzxzzzph61amlqbsslq4z9s1pq";
        authors = [
          "Hanno Braun <mail@hannobraun.de>"
          "Félix Saparelli <me@passcod.name>"
          "Cristian Kubis <cristian.kubis@tsunix.de>"
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "inotify-sys";
            packageId = "inotify-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = ["stream"];
          "futures-core" = ["dep:futures-core"];
          "stream" = ["futures-core" "tokio"];
          "tokio" = ["dep:tokio"];
        };
      };
      "inotify-sys" = rec {
        crateName = "inotify-sys";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1syhjgvkram88my04kv03s0zwa66mdwa5v7ddja3pzwvx2sh4p70";
        libName = "inotify_sys";
        authors = [
          "Hanno Braun <hb@hannobraun.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.10.1";
        edition = "2018";
        sha256 = "025p9wm94q1w2l13hbbr4cbmfygly3a2ag8g5s618l2jhq4l3hnx";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = ["std"];
          "heapless" = ["dep:heapless"];
          "json" = ["serde" "schemars"];
          "schemars" = ["dep:schemars"];
          "ser_as_str" = ["heapless"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "is-terminal" = rec {
        crateName = "is-terminal";
        version = "0.4.13";
        edition = "2018";
        sha256 = "0jwgjjz33kkmnwai3nsdk1pz9vb6gkqvw1d1vq7bs3q48kinh7r6";
        libName = "is_terminal";
        authors = [
          "softprops <d.tangren@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.4.0";
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console"];
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
        ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0nv9cqjwzr3q58qz84dcz63ggc54yhf1yqar1m858m1kfd4g3wa9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = ["dep:no-panic"];
        };
      };
      "jank_rs" = rec {
        crateName = "jank_rs";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "jank_rs";
            path = "src/main.rs";
            requiredFeatures = [];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./.;
        };
        dependencies = [
          {
            name = "chorus";
            packageId = "chorus";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "pubserve";
            packageId = "pubserve";
            features = ["async" "async-trait"];
          }
          {
            name = "rocket";
            packageId = "rocket";
            features = ["json"];
          }
          {
            name = "rocket_dyn_templates";
            packageId = "rocket_dyn_templates";
            features = ["tera" "handlebars"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.72";
        edition = "2021";
        sha256 = "1a8r61hbgw5kmscgj3g5pzg2ywlnswvljy0l592v0xdxlayz323a";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
      };
      "jsonwebtoken" = rec {
        crateName = "jsonwebtoken";
        version = "8.3.0";
        edition = "2021";
        sha256 = "0y034cm6nwb9ljakh04j281asjjkbcaz9w1ziwykr81ski6xlwb9";
        authors = [
          "Vincent Prouillet <hello@vincentprouillet.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "pem";
            packageId = "pem";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.16.20";
            features = ["std"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
            optional = true;
          }
        ];
        features = {
          "default" = ["use_pem"];
          "pem" = ["dep:pem"];
          "simple_asn1" = ["dep:simple_asn1"];
          "use_pem" = ["pem" "simple_asn1"];
        };
        resolvedDefaultFeatures = ["default" "pem" "simple_asn1" "use_pem"];
      };
      "kqueue" = rec {
        crateName = "kqueue";
        version = "1.0.8";
        edition = "2018";
        sha256 = "033x2knkbv8d3jy6i9r32jcgsq6zm3g97zh5la43amkv3g5g2ivl";
        authors = [
          "William Orr <will@worrbase.com>"
        ];
        dependencies = [
          {
            name = "kqueue-sys";
            packageId = "kqueue-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "kqueue-sys" = rec {
        crateName = "kqueue-sys";
        version = "1.0.4";
        edition = "2018";
        sha256 = "12w3wi90y4kwis4k9g6fp0kqjdmc6l00j16g8mgbhac7vbzjb5pd";
        libName = "kqueue_sys";
        authors = [
          "William Orr <will@worrbase.com>"
          "Daniel (dmilith) Dettlaff <dmilith@me.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = ["dep:spin"];
          "spin_no_std" = ["spin"];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.161";
        edition = "2015";
        sha256 = "1lc5s3zd0491x9zxrv2kvclai1my1spz950pkkyry4vwh318k54f";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["std"];
          "rustc-dep-of-std" = ["align" "rustc-std-workspace-core"];
          "rustc-std-workspace-core" = ["dep:rustc-std-workspace-core"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "extra_traits" "std"];
      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0n4hk1rs8pzw8hdfmwn96c4568s93kfxqgcqswr7sajd2diaihjf";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "musl-reference-tests" = ["rand"];
          "rand" = ["dep:rand"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.3";
        edition = "2021";
        sha256 = "139602gzgs0k91zb7dvgj1qh4ynb8g1lbxsswdim18hcb6ykgzy0";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            optional = true;
          }
        ];
        features = {
          "default" = ["call" "std" "redox_syscall"];
          "ioslice" = ["dep:ioslice"];
          "mkns" = ["ioslice"];
          "redox_syscall" = ["dep:redox_syscall"];
        };
        resolvedDefaultFeatures = ["call" "default" "redox_syscall" "std"];
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.14";
        edition = "2021";
        sha256 = "12gsjgbhhjwywpqcrizv80vrp7p7grsz5laqq773i33wphjsxcvq";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std" "general" "errno"];
          "rustc-dep-of-std" = ["core" "compiler_builtins" "no_std"];
        };
        resolvedDefaultFeatures = ["elf" "errno" "general" "ioctl" "no_std"];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["atomic_usize"];
          "owning_ref" = ["dep:owning_ref"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["atomic_usize" "default"];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.22";
        edition = "2021";
        sha256 = "093vs0wkm1rgyykk7fjbqp2lwizbixac1w52gv109p5r4jh0p9x7";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = ["kv_std" "value-bag/serde" "serde"];
          "kv_std" = ["std" "kv" "value-bag/error"];
          "kv_sval" = ["kv" "value-bag/sval" "sval" "sval_ref"];
          "kv_unstable" = ["kv" "value-bag"];
          "kv_unstable_serde" = ["kv_serde" "kv_unstable_std"];
          "kv_unstable_std" = ["kv_std" "kv_unstable"];
          "kv_unstable_sval" = ["kv_sval" "kv_unstable"];
          "serde" = ["dep:serde"];
          "sval" = ["dep:sval"];
          "sval_ref" = ["dep:sval_ref"];
          "value-bag" = ["dep:value-bag"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "loom" = rec {
        crateName = "loom";
        version = "0.5.6";
        edition = "2018";
        sha256 = "1x9hmiv00ir79kypcg0jdw0j0fkd3ymq6rpv6pli6q5qifrfql7z";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "generator";
            packageId = "generator";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = ["env-filter"];
          }
        ];
        features = {
          "checkpoint" = ["serde" "serde_json"];
          "futures" = ["pin-utils"];
          "pin-utils" = ["dep:pin-utils"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
        };
        resolvedDefaultFeatures = ["checkpoint" "default" "serde" "serde_json"];
      };
      "match_cfg" = rec {
        crateName = "match_cfg";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1r5j3zqc3qr8ybcx95bk8q57mkizmgmffj5lmicd4i8d9riyigpz";
        authors = [
          "gnzlbg <gonzalobg88@gmail.com>"
        ];
        features = {
          "default" = ["use_core"];
        };
        resolvedDefaultFeatures = ["default" "use_core"];
      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "logging" = ["dep:log"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
          "std" = ["alloc"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.17";
        edition = "2015";
        sha256 = "16hkibgvb9klh0w0jk5crr5xv90l3wlf77ggymzjmvl1818vnxv8";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
      };
      "mime_guess" = rec {
        crateName = "mime_guess";
        version = "2.0.5";
        edition = "2015";
        sha256 = "03jmg3yx6j39mg0kayf7w4a886dl3j15y8zs119zw01ccy74zi7p";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        dependencies = [
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        buildDependencies = [
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        features = {
          "default" = ["rev-mappings"];
        };
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1wadxkg6a6z4lr7kskapj5d8pxlx7cp1ifw4daqnkzqjxych5n72";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["with-alloc"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins" "adler2/rustc-dep-of-std"];
          "simd" = ["simd-adler32"];
          "simd-adler32" = ["dep:simd-adler32"];
        };
        resolvedDefaultFeatures = ["with-alloc"];
      };
      "mio 0.8.11" = rec {
        crateName = "mio";
        version = "0.8.11";
        edition = "2018";
        sha256 = "034byyl0ardml5yliy1hmvx8arkmn9rv479pid794sm07ia519m4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming"];
          }
        ];
        features = {
          "default" = ["log"];
          "log" = ["dep:log"];
          "os-ext" = ["os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security"];
        };
        resolvedDefaultFeatures = ["default" "log" "os-ext" "os-poll"];
      };
      "mio 1.0.2" = rec {
        crateName = "mio";
        version = "1.0.2";
        edition = "2021";
        sha256 = "1v1cnnn44awxbcfm4zlavwgkvbyg7gp5zzjm8mqf1apkrwflvq40";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            rename = "libc";
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming"];
          }
        ];
        features = {
          "default" = ["log"];
          "log" = ["dep:log"];
          "os-ext" = ["os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security"];
        };
        resolvedDefaultFeatures = ["net" "os-ext" "os-poll"];
      };
      "multer" = rec {
        crateName = "multer";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0jr2snfay5fjz50yvdja4vbnddlj1iriiqjym88pbj3daiv7gs43";
        authors = [
          "Rousan Ali <hello@rousan.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            usesDefaultFeatures = false;
            features = ["spin_mutex"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            features = ["io"];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
        features = {
          "all" = ["json"];
          "json" = ["serde" "serde_json"];
          "log" = ["dep:log"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "tokio" = ["dep:tokio"];
          "tokio-io" = ["tokio" "tokio-util"];
          "tokio-util" = ["dep:tokio-util"];
        };
        resolvedDefaultFeatures = ["default" "tokio" "tokio-io" "tokio-util"];
      };
      "normpath" = rec {
        crateName = "normpath";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1vfplrj3miplk0qc7b6psvf6vrmhr2whvqvlvk09lm5iqibik4f8";
        authors = [
          "dylni"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Storage_FileSystem"];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation"];
          }
        ];
        features = {
          "localization" = ["windows-sys/Win32_UI_Shell" "windows-sys/Win32_UI_WindowsAndMessaging"];
          "print_bytes" = ["dep:print_bytes"];
          "serde" = ["dep:serde"];
          "uniquote" = ["dep:uniquote"];
        };
      };
      "notify" = rec {
        crateName = "notify";
        version = "6.1.1";
        edition = "2021";
        sha256 = "0bad98r0ilkhhq2jg3zs11zcqasgbvxia8224wpasm74n65vs1b2";
        authors = [
          "Félix Saparelli <me@passcod.name>"
          "Daniel Faust <hessijames@gmail.com>"
          "Aron Heinecke <Ox0p54r36@t-online.de>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            target = {
              target,
              features,
            }: ("macos" == target."os" or null);
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
          }
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "fsevent-sys";
            packageId = "fsevent-sys";
            optional = true;
            target = {
              target,
              features,
            }: ("macos" == target."os" or null);
          }
          {
            name = "inotify";
            packageId = "inotify";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "kqueue";
            packageId = "kqueue";
            target = {
              target,
              features,
            }: (("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonflybsd" == target."os" or null));
          }
          {
            name = "kqueue";
            packageId = "kqueue";
            optional = true;
            target = {
              target,
              features,
            }: ("macos" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = {
              target,
              features,
            }: (("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonflybsd" == target."os" or null));
            features = ["os-ext"];
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null));
            features = ["os-ext"];
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            optional = true;
            target = {
              target,
              features,
            }: ("macos" == target."os" or null);
            features = ["os-ext"];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_System_Threading" "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_Security" "Win32_System_WindowsProgramming" "Win32_System_IO"];
          }
        ];
        features = {
          "crossbeam-channel" = ["dep:crossbeam-channel"];
          "default" = ["macos_fsevent" "crossbeam-channel"];
          "fsevent-sys" = ["dep:fsevent-sys"];
          "kqueue" = ["dep:kqueue"];
          "macos_fsevent" = ["fsevent-sys"];
          "macos_kqueue" = ["kqueue" "mio"];
          "mio" = ["dep:mio"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["crossbeam-channel" "default" "fsevent-sys" "macos_fsevent"];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv"];
          }
        ];
        features = {
          "derive_serde_style" = ["serde"];
          "serde" = ["dep:serde"];
        };
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std"];
          "quickcheck" = ["dep:quickcheck"];
          "rand" = ["dep:rand"];
          "serde" = ["dep:serde"];
          "std" = ["num-integer/std" "num-traits/std"];
        };
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["num-traits/std"];
        };
        resolvedDefaultFeatures = ["i128"];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "libm" = ["dep:libm"];
        };
        resolvedDefaultFeatures = ["i128"];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.16.0";
        edition = "2015";
        sha256 = "0hra6ihpnh06dvfvz9ipscys0xfqa9ca9hzp384d5m02ssvgqqa1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (!(target."windows" or false));
          }
        ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.5";
        edition = "2018";
        sha256 = "0gk8lhbs229c68lapq6w6qmnm4jkj48hrcw5ilfyswy514nhmpxf";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = ["read" "write" "build" "std" "compression" "wasm"];
          "alloc" = ["dep:alloc"];
          "build" = ["build_core" "write_std" "elf"];
          "build_core" = ["read_core" "write_core"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "compression" = ["dep:flate2" "dep:ruzstd" "std"];
          "core" = ["dep:core"];
          "default" = ["read" "compression"];
          "doc" = ["read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff"];
          "pe" = ["coff"];
          "read" = ["read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned"];
          "rustc-dep-of-std" = ["core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std"];
          "std" = ["memchr/std"];
          "unstable-all" = ["all" "unstable"];
          "wasm" = ["dep:wasmparser"];
          "write" = ["write_std" "coff" "elf" "macho" "pe" "xcoff"];
          "write_core" = ["dep:crc32fast" "dep:indexmap" "dep:hashbrown"];
          "write_std" = ["write_core" "std" "indexmap?/std" "crc32fast?/std"];
        };
        resolvedDefaultFeatures = ["archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff"];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.20.2";
        edition = "2021";
        sha256 = "0xb7rw1aqr7pa4z3b00y7786gyf8awx2gca3md73afy76dzgwq8j";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = ["race"];
          "atomic-polyfill" = ["critical-section"];
          "critical-section" = ["dep:critical-section" "portable-atomic"];
          "default" = ["std"];
          "parking_lot" = ["dep:parking_lot_core"];
          "portable-atomic" = ["dep:portable-atomic"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "race" "std"];
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = ["lock_api/arc_lock"];
          "deadlock_detection" = ["parking_lot_core/deadlock_detection"];
          "nightly" = ["parking_lot_core/nightly" "lock_api/nightly"];
          "owning_ref" = ["lock_api/owning_ref"];
          "serde" = ["lock_api/serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = {
              target,
              features,
            }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "deadlock_detection" = ["petgraph" "thread-id" "backtrace"];
          "petgraph" = ["dep:petgraph"];
          "thread-id" = ["dep:thread-id"];
        };
      };
      "parse-zoneinfo" = rec {
        crateName = "parse-zoneinfo";
        version = "0.3.1";
        edition = "2021";
        sha256 = "093cs8slbd6kyfi6h12isz0mnaayf5ha8szri1xrbqj4inqhaahz";
        libName = "parse_zoneinfo";
        dependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = ["std" "unicode-perl"];
          }
        ];
      };
      "pear" = rec {
        crateName = "pear";
        version = "0.2.9";
        edition = "2018";
        sha256 = "0rxlyizzaqq6lswgyfdxjxd3dyb1jfml9gwfpbx5g1j8rq0amvmx";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "inlinable_string";
            packageId = "inlinable_string";
          }
          {
            name = "pear_codegen";
            packageId = "pear_codegen";
          }
          {
            name = "yansi";
            packageId = "yansi";
            optional = true;
          }
        ];
        features = {
          "color" = ["yansi"];
          "default" = ["color"];
          "yansi" = ["dep:yansi"];
        };
        resolvedDefaultFeatures = ["color" "default" "yansi"];
      };
      "pear_codegen" = rec {
        crateName = "pear_codegen";
        version = "0.2.9";
        edition = "2018";
        sha256 = "0izijffdd2xs762497mk0xr7xwmyw62dzdqjz12v70n0bnc5pasb";
        procMacro = true;
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "proc-macro2-diagnostics";
            packageId = "proc-macro2-diagnostics";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full" "extra-traits" "visit-mut"];
          }
        ];
      };
      "pem" = rec {
        crateName = "pem";
        version = "1.1.1";
        edition = "2018";
        sha256 = "1f184b7vs5kgwglfsy9adqqy7625jsq8jj1lsxah9abn78kmr0x8";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.7.14";
        edition = "2021";
        sha256 = "0hplghvnz8yhs4mgpy7854gkpp6ysr96fy7ircs0k4w33al556c7";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "memchr"];
          "memchr" = ["dep:memchr"];
          "miette-error" = ["std" "pretty-print" "dep:miette" "dep:thiserror"];
          "pretty-print" = ["dep:serde" "dep:serde_json"];
          "std" = ["ucd-trie/std" "dep:thiserror"];
        };
        resolvedDefaultFeatures = ["default" "memchr" "std"];
      };
      "pest_derive" = rec {
        crateName = "pest_derive";
        version = "2.7.14";
        edition = "2021";
        sha256 = "1p82kbjm5dvflxgj9vl3q78n2v4l9khh2cwizm3kl4ibcdgkc56j";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_generator";
            packageId = "pest_generator";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "grammar-extras" = ["pest_generator/grammar-extras"];
          "not-bootstrap-in-src" = ["pest_generator/not-bootstrap-in-src"];
          "std" = ["pest/std" "pest_generator/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "pest_generator" = rec {
        crateName = "pest_generator";
        version = "2.7.14";
        edition = "2021";
        sha256 = "0khcyqjyd8pg1qcivh1xzk9613zbn983ycdclap1f5rh6ikmhmgb";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_meta";
            packageId = "pest_meta";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
          "default" = ["std"];
          "grammar-extras" = ["pest_meta/grammar-extras"];
          "not-bootstrap-in-src" = ["pest_meta/not-bootstrap-in-src"];
          "std" = ["pest/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "pest_meta" = rec {
        crateName = "pest_meta";
        version = "2.7.14";
        edition = "2021";
        sha256 = "0gfhci2whiz3kiw2k2asj2lcj8rrrp4hm69whdvcpngl1jks4pdp";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pest";
            packageId = "pest";
          }
        ];
        buildDependencies = [
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "not-bootstrap-in-src" = ["dep:cargo"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "pharos" = rec {
        crateName = "pharos";
        version = "0.5.3";
        edition = "2021";
        sha256 = "055lg1dzrxnryfy34a9cyrg21b7cl6l2frfx2p7fdvkz864p6mp9";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = ["std"];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
      };
      "phf" = rec {
        crateName = "phf";
        version = "0.11.2";
        edition = "2021";
        sha256 = "1p03rsw66l7naqhpgr1a34r9yzi1gv9jh16g3fsk6wrwyfwdiqmd";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "macros" = ["phf_macros"];
          "phf_macros" = ["dep:phf_macros"];
          "serde" = ["dep:serde"];
          "std" = ["phf_shared/std"];
          "uncased" = ["phf_shared/uncased"];
          "unicase" = ["phf_macros?/unicase" "phf_shared/unicase"];
        };
      };
      "phf_codegen" = rec {
        crateName = "phf_codegen";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0nia6h4qfwaypvfch3pnq1nd2qj64dif4a6kai3b7rjrsf49dlz8";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
        ];
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.11.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1c14pjyxbcpwkdgw109f7581cc5fa3fnkzdq1ikvx7mdq9jcrr28";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
            features = ["small_rng"];
          }
        ];
        features = {
          "criterion" = ["dep:criterion"];
        };
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0azphb0a330ypqx3qvyffal5saqnks0xvl8rj73jlk3qxxgbkz4h";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = ["std"];
          "uncased" = ["dep:uncased"];
          "unicase" = ["dep:unicase"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1zz4xif3iknfrpmvqmh0pcc9mx4cxm28jywqydir3pimcla1wnli";
        libName = "pin_project_lite";
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = ["std" "macros"];
          "macros" = ["dep:powerfmt-macros"];
          "std" = ["alloc"];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.20";
        edition = "2021";
        sha256 = "017ax9ssdnpww7nrl1hvqh2lzncpv04nnsibmnw9nxjnaqlpp5bp";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = ["simd" "derive"];
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["simd" "std"];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.89";
        edition = "2021";
        sha256 = "0vlq56v41dsj69pnk7lil7fxvbfid50jnzdn3xnr31g05mkb0fgi";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = ["proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "proc-macro2-diagnostics" = rec {
        crateName = "proc-macro2-diagnostics";
        version = "0.10.1";
        edition = "2018";
        sha256 = "1j48ipc80pykvhx6yhndfa774s58ax1h6sm6mlhf09ls76f6l1mg";
        libName = "proc_macro2_diagnostics";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "yansi";
            packageId = "yansi";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "colors" = ["yansi"];
          "default" = ["colors"];
          "yansi" = ["dep:yansi"];
        };
        resolvedDefaultFeatures = ["colors" "default" "yansi"];
      };
      "pubserve" = rec {
        crateName = "pubserve";
        version = "1.1.0";
        edition = "2021";
        sha256 = "193m08yb29arkrhybxxal6i2izkkqk5ynrk6fgg6377wjpsgab3a";
        authors = [
          "bitfl0wer <flori@polyphony.chat>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
        ];
        features = {
          "async" = ["async-trait"];
          "async-trait" = ["dep:async-trait"];
        };
        resolvedDefaultFeatures = ["async" "async-trait" "default" "send"];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.37";
        edition = "2018";
        sha256 = "1brklraw2g34bxy9y4q1nbrccn7bv36ylihv12c9vlcii55x7fdm";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["proc-macro"];
          "proc-macro" = ["proc-macro2/proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "alloc" = ["rand_core/alloc"];
          "default" = ["std" "std_rng"];
          "getrandom" = ["rand_core/getrandom"];
          "libc" = ["dep:libc"];
          "log" = ["dep:log"];
          "packed_simd" = ["dep:packed_simd"];
          "rand_chacha" = ["dep:rand_chacha"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde" "rand_core/serde1"];
          "simd_support" = ["packed_simd"];
          "std" = ["rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc"];
          "std_rng" = ["rand_chacha"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "getrandom" "libc" "rand_chacha" "small_rng" "std" "std_rng"];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = ["simd"];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde"];
          "std" = ["ppv-lite86/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "getrandom" = ["dep:getrandom"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde"];
          "std" = ["alloc" "getrandom" "getrandom/std"];
        };
        resolvedDefaultFeatures = ["alloc" "getrandom" "std"];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.7";
        edition = "2021";
        sha256 = "07vpgfr6a04k0x19zqr1xdlqm6fncik3zydbdi3f5g3l5k7zwvcv";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "core" = ["dep:core"];
          "default" = ["userspace"];
          "rustc-dep-of-std" = ["core" "bitflags/rustc-dep-of-std"];
        };
        resolvedDefaultFeatures = ["default" "userspace"];
      };
      "ref-cast" = rec {
        crateName = "ref-cast";
        version = "1.0.23";
        edition = "2021";
        sha256 = "0ca9fi5jsdibaidi2a55y9i1k1q0hvn4f6xlm0fmh7az9pwadw6c";
        libName = "ref_cast";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "ref-cast-impl";
            packageId = "ref-cast-impl";
          }
        ];
      };
      "ref-cast-impl" = rec {
        crateName = "ref-cast-impl";
        version = "1.0.23";
        edition = "2021";
        sha256 = "1rpkjlsr99g8nb5ripffz9n9rb3g32dmw83x724l8wykjgkh7hxw";
        procMacro = true;
        libName = "ref_cast_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.8";
            usesDefaultFeatures = false;
            features = ["alloc" "syntax" "meta" "nfa-pikevm"];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "perf" "unicode" "regex-syntax/default"];
          "logging" = ["aho-corasick?/logging" "memchr?/logging" "regex-automata/logging"];
          "perf" = ["perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal"];
          "perf-backtrack" = ["regex-automata/nfa-backtrack"];
          "perf-dfa" = ["regex-automata/hybrid"];
          "perf-dfa-full" = ["regex-automata/dfa-build" "regex-automata/dfa-search"];
          "perf-inline" = ["regex-automata/perf-inline"];
          "perf-literal" = ["dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal"];
          "perf-onepass" = ["regex-automata/dfa-onepass"];
          "std" = ["aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode"];
          "unicode-age" = ["regex-automata/unicode-age" "regex-syntax/unicode-age"];
          "unicode-bool" = ["regex-automata/unicode-bool" "regex-syntax/unicode-bool"];
          "unicode-case" = ["regex-automata/unicode-case" "regex-syntax/unicode-case"];
          "unicode-gencat" = ["regex-automata/unicode-gencat" "regex-syntax/unicode-gencat"];
          "unicode-perl" = ["regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl"];
          "unicode-script" = ["regex-automata/unicode-script" "regex-syntax/unicode-script"];
          "unicode-segment" = ["regex-automata/unicode-segment" "regex-syntax/unicode-segment"];
          "unstable" = ["pattern"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "fst" = ["dep:fst"];
          "regex-syntax" = ["dep:regex-syntax"];
          "std" = ["regex-syntax"];
          "transducer" = ["std" "fst"];
        };
        resolvedDefaultFeatures = ["default" "regex-syntax" "std"];
      };
      "regex-automata 0.4.8" = rec {
        crateName = "regex-automata";
        version = "0.4.8";
        edition = "2021";
        sha256 = "18wd530ndrmygi6xnz3sp345qi0hy2kdbsa89182nwbl6br5i1rn";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid"];
          "dfa" = ["dfa-build" "dfa-search" "dfa-onepass"];
          "dfa-build" = ["nfa-thompson" "dfa-search"];
          "dfa-onepass" = ["nfa-thompson"];
          "hybrid" = ["alloc" "nfa-thompson"];
          "internal-instrument" = ["internal-instrument-pikevm"];
          "internal-instrument-pikevm" = ["logging" "std"];
          "logging" = ["dep:log" "aho-corasick?/logging" "memchr?/logging"];
          "meta" = ["syntax" "nfa-pikevm"];
          "nfa" = ["nfa-thompson" "nfa-pikevm" "nfa-backtrack"];
          "nfa-backtrack" = ["nfa-thompson"];
          "nfa-pikevm" = ["nfa-thompson"];
          "nfa-thompson" = ["alloc"];
          "perf" = ["perf-inline" "perf-literal"];
          "perf-literal" = ["perf-literal-substring" "perf-literal-multisubstring"];
          "perf-literal-multisubstring" = ["std" "dep:aho-corasick"];
          "perf-literal-substring" = ["aho-corasick?/perf-literal" "dep:memchr"];
          "std" = ["regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc"];
          "syntax" = ["dep:regex-syntax" "alloc"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode"];
          "unicode-age" = ["regex-syntax?/unicode-age"];
          "unicode-bool" = ["regex-syntax?/unicode-bool"];
          "unicode-case" = ["regex-syntax?/unicode-case"];
          "unicode-gencat" = ["regex-syntax?/unicode-gencat"];
          "unicode-perl" = ["regex-syntax?/unicode-perl"];
          "unicode-script" = ["regex-syntax?/unicode-script"];
          "unicode-segment" = ["regex-syntax?/unicode-segment"];
        };
        resolvedDefaultFeatures = ["alloc" "dfa-onepass" "hybrid" "meta" "nfa" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary"];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["unicode"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
        };
        resolvedDefaultFeatures = ["default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
      };
      "regex-syntax 0.8.5" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std" "unicode"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
        };
        resolvedDefaultFeatures = ["default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
      };
      "reqwest" = rec {
        crateName = "reqwest";
        version = "0.11.26";
        edition = "2021";
        sha256 = "1chhmkfdk0ji5dacwsjix05g2vrmjzkyn76mg7cbg2vsmz297gvq";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["tcp" "http1" "http2" "client" "runtime"];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["dangerous_configuration"];
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
          }
          {
            name = "system-configuration";
            packageId = "system-configuration";
            target = {
              target,
              features,
            }: ("macos" == target."os" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["net" "time"];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream"];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "winreg";
            packageId = "winreg";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["std" "alloc"];
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["tcp" "stream" "http1" "http2" "client" "server" "runtime"];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["derive"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["macros" "rt-multi-thread"];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["serde-serialize"];
          }
        ];
        features = {
          "__rustls" = ["hyper-rustls" "tokio-rustls" "rustls" "__tls"];
          "__tls" = ["dep:rustls-pemfile"];
          "async-compression" = ["dep:async-compression"];
          "blocking" = ["futures-util/io" "tokio/sync"];
          "brotli" = ["async-compression" "async-compression/brotli" "tokio-util"];
          "cookie_crate" = ["dep:cookie_crate"];
          "cookie_store" = ["dep:cookie_store"];
          "cookies" = ["cookie_crate" "cookie_store"];
          "default" = ["default-tls"];
          "default-tls" = ["hyper-tls" "native-tls-crate" "__tls" "tokio-native-tls"];
          "deflate" = ["async-compression" "async-compression/zlib" "tokio-util"];
          "futures-channel" = ["dep:futures-channel"];
          "gzip" = ["async-compression" "async-compression/gzip" "tokio-util"];
          "h3" = ["dep:h3"];
          "h3-quinn" = ["dep:h3-quinn"];
          "http3" = ["rustls-tls-manual-roots" "h3" "h3-quinn" "quinn" "futures-channel"];
          "hyper-rustls" = ["dep:hyper-rustls"];
          "hyper-tls" = ["dep:hyper-tls"];
          "json" = ["serde_json"];
          "mime_guess" = ["dep:mime_guess"];
          "multipart" = ["mime_guess"];
          "native-tls" = ["default-tls"];
          "native-tls-alpn" = ["native-tls" "native-tls-crate/alpn"];
          "native-tls-crate" = ["dep:native-tls-crate"];
          "native-tls-vendored" = ["native-tls" "native-tls-crate/vendored"];
          "quinn" = ["dep:quinn"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "rustls-tls" = ["rustls-tls-webpki-roots"];
          "rustls-tls-manual-roots" = ["__rustls"];
          "rustls-tls-native-roots" = ["rustls-native-certs" "__rustls"];
          "rustls-tls-webpki-roots" = ["webpki-roots" "__rustls"];
          "serde_json" = ["dep:serde_json"];
          "socks" = ["tokio-socks"];
          "stream" = ["tokio/fs" "tokio-util" "wasm-streams"];
          "tokio-native-tls" = ["dep:tokio-native-tls"];
          "tokio-rustls" = ["dep:tokio-rustls"];
          "tokio-socks" = ["dep:tokio-socks"];
          "tokio-util" = ["dep:tokio-util"];
          "trust-dns" = ["trust-dns-resolver"];
          "trust-dns-resolver" = ["dep:trust-dns-resolver"];
          "wasm-streams" = ["dep:wasm-streams"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["__rustls" "__tls" "hyper-rustls" "json" "mime_guess" "multipart" "rustls" "rustls-tls-webpki-roots" "serde_json" "tokio-rustls" "webpki-roots"];
      };
      "ring 0.16.20" = rec {
        crateName = "ring";
        version = "0.16.20";
        edition = "2018";
        links = "ring-asm";
        sha256 = "1z682xp7v38ayq9g9nkbhhfpj6ygralmlx7wdmsfv8rnw99cylrh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("android" == target."os" or null) || ("linux" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("android" == target."os" or null) || ("linux" == target."os" or null));
            features = ["std"];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("illumos" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("solaris" == target."os" or null));
            features = ["std"];
          }
          {
            name = "spin";
            packageId = "spin 0.5.2";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null) || ((("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)) && (("android" == target."os" or null) || ("fuchsia" == target."os" or null) || ("linux" == target."os" or null))));
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.7.1";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."vendor" or null) && ("unknown" == target."os" or null) && ("" == target."env" or null));
            features = ["Crypto" "Window"];
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["ntsecapi" "wtypesbase"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."unix" or false) || (target."windows" or false));
          }
        ];
        features = {
          "default" = ["alloc" "dev_urandom_fallback"];
          "dev_urandom_fallback" = ["once_cell"];
          "once_cell" = ["dep:once_cell"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "dev_urandom_fallback" "once_cell" "std"];
      };
      "ring 0.17.8" = rec {
        crateName = "ring";
        version = "0.17.8";
        edition = "2021";
        links = "ring_core_0_17_8";
        sha256 = "03fwlb1ssrmfxdckvqv033pfmk01rhx9ynwi7r186dcfcp5s8zy1";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && (("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)));
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) || ("arm" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
            features = ["once"];
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("windows" == target."os" or null));
            features = ["Win32_Foundation" "Win32_System_Threading"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = ["alloc" "dev_urandom_fallback"];
          "std" = ["alloc"];
          "wasm32_unknown_unknown_js" = ["getrandom/js"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "dev_urandom_fallback"];
      };
      "rocket" = rec {
        crateName = "rocket";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0gypf9z6s0kshv33qq1vf16raw8xnr1p03ii0kfgf7d3jrr905m5";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "atomic";
            packageId = "atomic 0.5.3";
          }
          {
            name = "binascii";
            packageId = "binascii";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "figment";
            packageId = "figment";
            features = ["toml" "env"];
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.6.0";
            features = ["serde"];
          }
          {
            name = "log";
            packageId = "log";
            features = ["std"];
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "multer";
            packageId = "multer";
            features = ["tokio-io"];
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "rocket_codegen";
            packageId = "rocket_codegen";
          }
          {
            name = "rocket_http";
            packageId = "rocket_http";
            features = ["serde"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "state";
            packageId = "state";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "time";
            packageId = "time";
            features = ["macros" "parsing"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["fs" "io-std" "io-util" "rt-multi-thread" "sync" "signal" "macros"];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = ["signal" "time"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            usesDefaultFeatures = false;
            features = ["io"];
          }
          {
            name = "ubyte";
            packageId = "ubyte";
            features = ["serde"];
          }
          {
            name = "yansi";
            packageId = "yansi";
            features = ["detect-tty"];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        devDependencies = [
          {
            name = "figment";
            packageId = "figment";
            features = ["test"];
          }
        ];
        features = {
          "default" = ["http2"];
          "http2" = ["rocket_http/http2"];
          "json" = ["serde_json" "tokio/io-util"];
          "msgpack" = ["rmp-serde" "tokio/io-util"];
          "mtls" = ["rocket_http/mtls" "tls"];
          "rmp-serde" = ["dep:rmp-serde"];
          "secrets" = ["rocket_http/private-cookies"];
          "serde_json" = ["dep:serde_json"];
          "tls" = ["rocket_http/tls"];
          "uuid" = ["uuid_" "rocket_http/uuid"];
          "uuid_" = ["dep:uuid_"];
        };
        resolvedDefaultFeatures = ["default" "http2" "json" "serde_json"];
      };
      "rocket_codegen" = rec {
        crateName = "rocket_codegen";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0inxw7nzr52sabwpz83cz5rh1a0mg32cg7w7ih8715qsxkbk4pap";
        procMacro = true;
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "devise";
            packageId = "devise";
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.6.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rocket_http";
            packageId = "rocket_http";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full" "visit" "visit-mut" "extra-traits"];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        devDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
      };
      "rocket_dyn_templates" = rec {
        crateName = "rocket_dyn_templates";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0yhdcqs0bv9wdzbg8s893kb4rpwpz0pa6936mkvz6zg6r4cvkfjv";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "handlebars";
            packageId = "handlebars";
            optional = true;
          }
          {
            name = "normpath";
            packageId = "normpath";
          }
          {
            name = "notify";
            packageId = "notify";
          }
          {
            name = "rocket";
            packageId = "rocket";
            usesDefaultFeatures = false;
          }
          {
            name = "tera";
            packageId = "tera";
            optional = true;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "handlebars" = ["dep:handlebars"];
          "minijinja" = ["dep:minijinja"];
          "tera" = ["dep:tera"];
        };
        resolvedDefaultFeatures = ["handlebars" "tera"];
      };
      "rocket_http" = rec {
        crateName = "rocket_http";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1fc2z0a7zhmf8rh7s1dwdmmkjmq7qiivsi6027v6ac7f41d92x72";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "cookie";
            packageId = "cookie";
            features = ["percent-encode"];
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            features = ["http1" "runtime" "server" "stream"];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.6.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pear";
            packageId = "pear";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            rename = "serde_";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = ["const_generics" "const_new"];
          }
          {
            name = "stable-pattern";
            packageId = "stable-pattern";
          }
          {
            name = "state";
            packageId = "state";
          }
          {
            name = "time";
            packageId = "time";
            features = ["formatting" "macros"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["net" "sync" "time"];
          }
          {
            name = "uncased";
            packageId = "uncased";
          }
        ];
        features = {
          "http2" = ["hyper/http2"];
          "mtls" = ["tls" "x509-parser"];
          "private-cookies" = ["cookie/private" "cookie/key-expansion"];
          "rustls" = ["dep:rustls"];
          "rustls-pemfile" = ["dep:rustls-pemfile"];
          "serde" = ["uncased/with-serde-alloc" "serde_"];
          "serde_" = ["dep:serde_"];
          "tls" = ["rustls" "tokio-rustls" "rustls-pemfile"];
          "tokio-rustls" = ["dep:tokio-rustls"];
          "uuid" = ["uuid_"];
          "uuid_" = ["dep:uuid_"];
          "x509-parser" = ["dep:x509-parser"];
        };
        resolvedDefaultFeatures = ["default" "http2" "serde" "serde_"];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
      };
      "rustix" = rec {
        crateName = "rustix";
        version = "0.38.37";
        edition = "2021";
        sha256 = "04b8f99c2g36gyggf4aphw8742k2b1vls3364n2z493whj5pijwa";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = ["general" "ioctl" "no_std"];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = ["general" "errno" "ioctl" "no_std" "elf"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading"];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = ["event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std" "use-libc-auxv"];
          "io_uring" = ["event" "fs" "net" "linux-raw-sys/io_uring"];
          "itoa" = ["dep:itoa"];
          "libc" = ["dep:libc"];
          "libc-extra-traits" = ["libc?/extra_traits"];
          "libc_errno" = ["dep:libc_errno"];
          "linux_latest" = ["linux_4_11"];
          "net" = ["linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp"];
          "once_cell" = ["dep:once_cell"];
          "param" = ["fs"];
          "process" = ["linux-raw-sys/prctl"];
          "procfs" = ["once_cell" "itoa" "fs"];
          "pty" = ["itoa" "fs"];
          "runtime" = ["linux-raw-sys/prctl"];
          "rustc-dep-of-std" = ["core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
          "shm" = ["fs"];
          "std" = ["bitflags/std" "alloc" "libc?/std" "libc_errno?/std" "libc-extra-traits"];
          "system" = ["linux-raw-sys/system"];
          "thread" = ["linux-raw-sys/prctl"];
          "use-libc" = ["libc_errno" "libc" "libc-extra-traits"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "fs" "libc-extra-traits" "std" "use-libc-auxv"];
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.21.12";
        edition = "2021";
        sha256 = "0gjdg2a9r81sdwkyw3n5yfbkrr6p9gyk3xr2kcsr3cs83x6s2miz";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
            features = ["alloc" "std"];
          }
          {
            name = "sct";
            packageId = "sct";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = ["logging" "tls12"];
          "log" = ["dep:log"];
          "logging" = ["log"];
          "read_buf" = ["rustversion"];
          "rustversion" = ["dep:rustversion"];
        };
        resolvedDefaultFeatures = ["dangerous_configuration" "default" "log" "logging" "tls12"];
      };
      "rustls-pemfile" = rec {
        crateName = "rustls-pemfile";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1324n5bcns0rnw6vywr5agff3rwfvzphi7rmbyzwnv6glkhclx0w";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
        ];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.10.0";
        edition = "2021";
        sha256 = "0jv78c32pgf1i0bn7rzf4xdr9qh5wsvigp6akc1yhzls7hdj1w8n";
        libName = "rustls_pki_types";
        features = {
          "default" = ["alloc"];
          "std" = ["alloc"];
          "web" = ["web-time"];
          "web-time" = ["dep:web-time"];
        };
      };
      "rustls-webpki" = rec {
        crateName = "rustls-webpki";
        version = "0.101.7";
        edition = "2021";
        sha256 = "0rapfhpkqp75552i8r0y7f4vq7csb4k7gjjans0df73sxv8paqlb";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.8";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = ["ring/alloc"];
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.18";
        edition = "2018";
        sha256 = "0j2207vmgrcxwwwvknfn3lwv4i8djhjnxlvwdnz8bwijqqmrz08f";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.18";
        edition = "2018";
        sha256 = "17xx2s8j1lln7iackzd9p0sv546vjq71i779gphjq923vjh5pjzk";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = ["dep:no-panic"];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.1";
        edition = "2015";
        sha256 = "15524h04mafihcvfpgxd8f4bgc3k95aclz8grjkg9a0rxcvn9kz1";
        libName = "scoped_tls";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["use_std"];
        };
      };
      "sct" = rec {
        crateName = "sct";
        version = "0.7.1";
        edition = "2021";
        sha256 = "056lmi2xkzdg1dbai6ha3n57s18cbip4pnmpdhyljli3m99n216s";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.8";
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.23";
        edition = "2018";
        sha256 = "12wqpxfflclbq4dv8sa6gchdh92ahhwn4ci1ls22wlby3h57wsb1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "send_wrapper" = rec {
        crateName = "send_wrapper";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wrxzsh9fzgkkkms621ydnz8mj30ilyq299a8cf65jn1y72hw2yd";
        authors = [
          "Thomas Keh"
        ];
        features = {
          "futures" = ["futures-core"];
          "futures-core" = ["dep:futures-core"];
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.213";
        edition = "2018";
        sha256 = "1hcv1q7ziy27c2awc0lnhigjj6rli1863fr0szw6sip2ylzqk9ry";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = {
              target,
              features,
            }:
              false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = ["std"];
          "derive" = ["serde_derive"];
          "serde_derive" = ["dep:serde_derive"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "derive" "rc" "serde_derive" "std"];
      };
      "serde-aux" = rec {
        crateName = "serde-aux";
        version = "4.5.0";
        edition = "2021";
        sha256 = "158w68035kzy0h202bdlln3s792is3a12cqyw496bl39lkxqnbhd";
        libName = "serde_aux";
        authors = [
          "Victor Polevoy <maintainer@vpolevoy.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc" "std" "clock"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "default" = ["chrono"];
        };
        resolvedDefaultFeatures = ["chrono" "default"];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.213";
        edition = "2015";
        sha256 = "198g92m9c8whvwrnrbxppwdm3pvbq7ddd35agkl5h2y514hav1by";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = ["proc-macro"];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = ["proc-macro"];
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = ["clone-impls" "derive" "parsing" "printing" "proc-macro"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.132";
        edition = "2021";
        sha256 = "00yv8vyn1qiplziswm1vwam4a0xs1rfr162q75njc85kyjpvy9np";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["serde/alloc"];
          "default" = ["std"];
          "indexmap" = ["dep:indexmap"];
          "preserve_order" = ["indexmap" "std"];
          "std" = ["memchr/std" "serde/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "raw_value" "std"];
      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.19";
        edition = "2021";
        sha256 = "1sb4cplc33z86pzlx38234xr141wr3cmviqgssiadisgl8dlar3c";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.8";
        edition = "2021";
        sha256 = "1q89g70azwi4ybilz5jb8prfpa575165lmrffd49vmcf76qpqq47";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["serde"];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "3.11.0";
        edition = "2021";
        sha256 = "05z83zkx9q8k4yw3z7isb3l95c5k43q0hwcz8h739f5jdnnvsa4f";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
            rename = "chrono_0_4";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            rename = "indexmap_1";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde-1"];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.6.0";
            rename = "indexmap_2";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            rename = "time_0_3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = ["preserve_order"];
          }
        ];
        features = {
          "alloc" = ["serde/alloc" "base64?/alloc" "chrono_0_4?/alloc" "hex?/alloc" "serde_json?/alloc" "time_0_3?/alloc"];
          "base64" = ["dep:base64" "alloc"];
          "chrono" = ["chrono_0_4"];
          "chrono_0_4" = ["dep:chrono_0_4"];
          "default" = ["std" "macros"];
          "guide" = ["dep:doc-comment" "dep:document-features" "macros" "std"];
          "hashbrown_0_14" = ["dep:hashbrown_0_14" "alloc"];
          "hashbrown_0_15" = ["dep:hashbrown_0_15" "alloc"];
          "hex" = ["dep:hex" "alloc"];
          "indexmap" = ["indexmap_1"];
          "indexmap_1" = ["dep:indexmap_1" "alloc"];
          "indexmap_2" = ["dep:indexmap_2" "alloc"];
          "json" = ["dep:serde_json" "alloc"];
          "macros" = ["dep:serde_with_macros"];
          "schemars_0_8" = ["dep:schemars_0_8" "std" "serde_with_macros?/schemars_0_8"];
          "std" = ["alloc" "serde/std" "chrono_0_4?/clock" "chrono_0_4?/std" "indexmap_1?/std" "indexmap_2?/std" "time_0_3?/serde-well-known" "time_0_3?/std"];
          "time_0_3" = ["dep:time_0_3"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "macros" "std"];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "3.11.0";
        edition = "2021";
        sha256 = "17d7viab3z0ypf4jzpn73xydxn22c911n5nsycjgfkl5m4a6514x";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["extra-traits" "full" "parsing"];
          }
        ];
        features = {
        };
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "asm" = ["sha1-asm"];
          "default" = ["std"];
          "oid" = ["digest/oid"];
          "sha1-asm" = ["dep:sha1-asm"];
          "std" = ["digest/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        sha256 = "1j1x78zk9il95w9iv46dh9wm73r6xrgj32y6lzzw7bxws9dbfgbr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "asm" = ["sha2-asm"];
          "asm-aarch64" = ["asm"];
          "default" = ["std"];
          "oid" = ["digest/oid"];
          "sha2-asm" = ["dep:sha2-asm"];
          "std" = ["digest/std"];
        };
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = ["dep:loom"];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1cb5akgq8ajnd5spyn587srvs4n26ryq0p78nswffwhv46sf1sd9";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "simple_asn1" = rec {
        crateName = "simple_asn1";
        version = "0.6.2";
        edition = "2018";
        sha256 = "11d0l3l7lppzr1wxhvsbmjmw6s2vy3v7b8ygz500z4di9qhfbi5d";
        authors = [
          "Adam Wick <awick@uhsure.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = ["formatting" "macros" "parsing"];
          }
        ];
        devDependencies = [
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = ["formatting" "macros" "parsing" "quickcheck"];
          }
        ];
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "serde_no_std" = ["serde/alloc"];
          "serde_std" = ["std" "serde/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "slug" = rec {
        crateName = "slug";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0977cyp88xrwbpmqwzafkvv8vm9i0gdb5zjskb6f6pg45vvq0al8";
        type = ["cdylib" "rlib"];
        authors = [
          "Steven Allen <steven@stebalien.com>"
        ];
        dependencies = [
          {
            name = "deunicode";
            packageId = "deunicode";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
        ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.13.2";
        edition = "2018";
        sha256 = "0rsw5samawl3wsw6glrsb127rx6sh89a8wyikicw6dkdcjd1lpiw";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "const_new" = ["const_generics"];
          "drain_keep_rest" = ["drain_filter"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["const_generics" "const_new"];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.7";
        edition = "2021";
        sha256 = "070r941wbq76xpy039an4pyiy3rfj7mp7pvibf1rcri9njq5wc6f";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["all"];
      };
      "spin 0.5.2" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];
      };
      "spin 0.9.8" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "barrier" = ["mutex"];
          "default" = ["lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier"];
          "fair_mutex" = ["mutex"];
          "lazy" = ["once"];
          "lock_api" = ["lock_api_crate"];
          "lock_api_crate" = ["dep:lock_api_crate"];
          "portable-atomic" = ["dep:portable-atomic"];
          "portable_atomic" = ["portable-atomic"];
          "spin_mutex" = ["mutex"];
          "ticket_mutex" = ["mutex"];
          "use_ticket_mutex" = ["mutex" "ticket_mutex"];
        };
        resolvedDefaultFeatures = ["mutex" "once" "spin_mutex"];
      };
      "stable-pattern" = rec {
        crateName = "stable-pattern";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0i8hq82vm82mqj02qqcsd7caibrih7x5w3a1xpm8hpv30261cr25";
        libName = "stable_pattern";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["memchr/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "state" = rec {
        crateName = "state";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1n3n2h324h1y5zhaajh6kplvzfvg1l6hsr8siggmf4yq8m24m31b";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "loom";
            packageId = "loom";
            target = {
              target,
              features,
            }: (target."loom" or false);
            features = ["checkpoint"];
          }
        ];
        features = {
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];
      };
      "syn" = rec {
        crateName = "syn";
        version = "2.0.85";
        edition = "2021";
        sha256 = "0mhvs8j1ykp26d504z14gbpn3p2xrkabrn1l43rzhknizhnic8sh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = ["derive" "parsing" "printing" "clone-impls" "proc-macro"];
          "printing" = ["dep:quote"];
          "proc-macro" = ["proc-macro2/proc-macro" "quote?/proc-macro"];
          "test" = ["syn-test-suite/all-features"];
        };
        resolvedDefaultFeatures = ["clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut"];
      };
      "sync_wrapper" = rec {
        crateName = "sync_wrapper";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0q01lyj0gr9a93n10nxsn8lwbzq97jqd6b768x17c8f7v7gccir0";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        features = {
          "futures" = ["futures-core"];
          "futures-core" = ["dep:futures-core"];
        };
      };
      "system-configuration" = rec {
        crateName = "system-configuration";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1rz0r30xn7fiyqay2dvzfy56cvaa3km74hnbz2d72p97bkf3lfms";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys";
          }
        ];
      };
      "system-configuration-sys" = rec {
        crateName = "system-configuration-sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1jckxvdr37bay3i9v52izgy52dg690x5xfg3hd394sv2xf4b2px7";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.13.0";
        edition = "2021";
        sha256 = "0nyagmbd4v5g6nzfydiihcn6l9j1w9bxgzyca5lyzgnhcbyckwph";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = ["fs"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Storage_FileSystem" "Win32_Foundation"];
          }
        ];
        features = {
        };
      };
      "tera" = rec {
        crateName = "tera";
        version = "1.20.0";
        edition = "2018";
        sha256 = "1vnj9imw2h9szkd1izsrhwrc9jvazvdsp84x65wg2rg88ldqb7db";
        authors = [
          "Vincent Prouillet <hello@prouilletvincent.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std" "clock"];
          }
          {
            name = "chrono-tz";
            packageId = "chrono-tz";
            optional = true;
          }
          {
            name = "globwalk";
            packageId = "globwalk";
          }
          {
            name = "humansize";
            packageId = "humansize";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "slug";
            packageId = "slug";
            optional = true;
          }
          {
            name = "unic-segment";
            packageId = "unic-segment";
          }
        ];
        features = {
          "builtins" = ["urlencode" "slug" "humansize" "chrono" "chrono-tz" "rand"];
          "chrono" = ["dep:chrono"];
          "chrono-tz" = ["dep:chrono-tz"];
          "date-locale" = ["builtins" "chrono/unstable-locales"];
          "default" = ["builtins"];
          "humansize" = ["dep:humansize"];
          "percent-encoding" = ["dep:percent-encoding"];
          "preserve_order" = ["serde_json/preserve_order"];
          "rand" = ["dep:rand"];
          "slug" = ["dep:slug"];
          "urlencode" = ["percent-encoding"];
        };
        resolvedDefaultFeatures = ["builtins" "chrono" "chrono-tz" "default" "humansize" "percent-encoding" "rand" "slug" "urlencode"];
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.65";
        edition = "2021";
        sha256 = "1mdkawq9l9p02zvq7y4py739rjk9wk2ha27mbsb3i6sdb7csn4ax";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];
      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.65";
        edition = "2021";
        sha256 = "00l6gyrx6qlm1d7if3dcfl2sl0mg8k21caknkpk7glnb481pfwdf";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "time" = rec {
        crateName = "time";
        version = "0.3.36";
        edition = "2021";
        sha256 = "11g8hdpahgrf1wwl2rpsg5nxq3aj7ri6xr672v4qcij6cgjqizax";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = ["powerfmt"];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = ["serde?/alloc"];
          "default" = ["std"];
          "formatting" = ["dep:itoa" "std" "time-macros?/formatting"];
          "large-dates" = ["time-macros?/large-dates"];
          "local-offset" = ["std" "dep:libc" "dep:num_threads"];
          "macros" = ["dep:time-macros"];
          "parsing" = ["time-macros?/parsing"];
          "quickcheck" = ["dep:quickcheck" "alloc" "deranged/quickcheck"];
          "rand" = ["dep:rand" "deranged/rand"];
          "serde" = ["dep:serde" "time-macros?/serde" "deranged/serde"];
          "serde-human-readable" = ["serde" "formatting" "parsing"];
          "serde-well-known" = ["serde" "formatting" "parsing"];
          "std" = ["alloc" "deranged/std"];
          "wasm-bindgen" = ["dep:js-sys"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "formatting" "macros" "parsing" "serde" "serde-well-known" "std"];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1wx3qizcihw6z151hywfzzyd1y5dl804ydyxci6qm07vbakpr4pg";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.18";
        edition = "2021";
        sha256 = "1kqwxvfh2jkpg38fy673d6danh1bhcmmbsmffww3mphgail2l99z";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["formatting" "parsing" "serde"];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.8.0";
        edition = "2018";
        sha256 = "0f5rf6a2wzyv6w4jmfga9iw7rp9fp5gf4d604xgjsf3d9wgqhpj4";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["tinyvec_macros"];
          "arbitrary" = ["dep:arbitrary"];
          "real_blackbox" = ["criterion/real_blackbox"];
          "rustc_1_57" = ["rustc_1_55"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
          "tinyvec_macros" = ["dep:tinyvec_macros"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "tinyvec_macros"];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];
      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.41.0";
        edition = "2021";
        sha256 = "1fwb4nm630hmy9cyl2ar6wxqckgvsakwhg1rhjza4is3a09k8pql";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = {
              target,
              features,
            }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["all"];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Security_Authorization"];
          }
        ];
        features = {
          "bytes" = ["dep:bytes"];
          "full" = ["fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time"];
          "io-util" = ["bytes"];
          "libc" = ["dep:libc"];
          "macros" = ["tokio-macros"];
          "mio" = ["dep:mio"];
          "net" = ["libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices"];
          "parking_lot" = ["dep:parking_lot"];
          "process" = ["bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming"];
          "rt-multi-thread" = ["rt"];
          "signal" = ["libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console"];
          "signal-hook-registry" = ["dep:signal-hook-registry"];
          "socket2" = ["dep:socket2"];
          "test-util" = ["rt" "sync" "time"];
          "tokio-macros" = ["dep:tokio-macros"];
          "tracing" = ["dep:tracing"];
          "windows-sys" = ["dep:windows-sys"];
        };
        resolvedDefaultFeatures = ["bytes" "default" "fs" "io-std" "io-util" "libc" "macros" "mio" "net" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "windows-sys"];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0lnpg14h1v3fh2jvnc8cz7cjf0m7z1xgkwfpcyy632g829imjgb9";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
        ];
      };
      "tokio-rustls" = rec {
        crateName = "tokio-rustls";
        version = "0.24.1";
        edition = "2018";
        sha256 = "10bhibg57mqir7xjhb2xmf24xgfpx6fzpyw720a4ih8a737jg0y2";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
        features = {
          "dangerous_configuration" = ["rustls/dangerous_configuration"];
          "default" = ["logging" "tls12"];
          "logging" = ["rustls/logging"];
          "secret_extraction" = ["rustls/secret_extraction"];
          "tls12" = ["rustls/tls12"];
        };
        resolvedDefaultFeatures = ["default" "logging" "tls12"];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.16";
        edition = "2021";
        sha256 = "1wc65gprcsyzqlr0k091glswy96kph90i32gffi4ksyh03hnqkjg";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full" "test-util"];
          }
        ];
        features = {
          "default" = ["time"];
          "fs" = ["tokio/fs"];
          "full" = ["time" "net" "io-util" "fs" "sync" "signal"];
          "io-util" = ["tokio/io-util"];
          "net" = ["tokio/net"];
          "signal" = ["tokio/signal"];
          "sync" = ["tokio/sync" "tokio-util"];
          "time" = ["tokio/time"];
          "tokio-util" = ["dep:tokio-util"];
        };
        resolvedDefaultFeatures = ["default" "signal" "time"];
      };
      "tokio-tungstenite" = rec {
        crateName = "tokio-tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "0v1v24l27hxi5hlchs7hfd5rgzi167x0ygbw220nvq0w5b5msb91";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["sink" "std"];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["io-util"];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite";
            usesDefaultFeatures = false;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["io-std" "macros" "net" "rt-multi-thread" "time"];
          }
        ];
        features = {
          "__rustls-tls" = ["rustls" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake"];
          "connect" = ["stream" "tokio/net" "handshake"];
          "default" = ["connect" "handshake"];
          "handshake" = ["tungstenite/handshake"];
          "native-tls" = ["native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake"];
          "native-tls-crate" = ["dep:native-tls-crate"];
          "native-tls-vendored" = ["native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "rustls-tls-native-roots" = ["__rustls-tls" "rustls-native-certs"];
          "rustls-tls-webpki-roots" = ["__rustls-tls" "webpki-roots"];
          "tokio-native-tls" = ["dep:tokio-native-tls"];
          "tokio-rustls" = ["dep:tokio-rustls"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["__rustls-tls" "connect" "default" "handshake" "rustls" "rustls-tls-webpki-roots" "stream" "tokio-rustls" "webpki-roots"];
      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.12";
        edition = "2021";
        sha256 = "0spc0g4irbnf2flgag22gfii87avqzibwfm0si0d1g0k9ijw7rv1";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
        features = {
          "__docs_rs" = ["futures-util"];
          "compat" = ["futures-io"];
          "full" = ["codec" "compat" "io-util" "time" "net" "rt"];
          "futures-io" = ["dep:futures-io"];
          "futures-util" = ["dep:futures-util"];
          "hashbrown" = ["dep:hashbrown"];
          "io-util" = ["io" "tokio/rt" "tokio/io-util"];
          "net" = ["tokio/net"];
          "rt" = ["tokio/rt" "tokio/sync" "futures-util" "hashbrown"];
          "slab" = ["dep:slab"];
          "time" = ["tokio/time" "slab"];
          "tracing" = ["dep:tracing"];
        };
        resolvedDefaultFeatures = ["codec" "default" "io"];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.8.19";
        edition = "2021";
        sha256 = "0knjd3mkxyb87qcs2dark3qkpadidap3frqfj5nqvhpxwfc1zvd1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = ["serde"];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = ["serde"];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde"];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "default" = ["parse" "display"];
          "display" = ["dep:toml_edit" "toml_edit?/display"];
          "indexmap" = ["dep:indexmap"];
          "parse" = ["dep:toml_edit" "toml_edit?/parse"];
          "preserve_order" = ["indexmap"];
        };
        resolvedDefaultFeatures = ["default" "display" "parse"];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.8";
        edition = "2021";
        sha256 = "0hgv7v9g35d7y9r2afic58jvlwnf73vgd1mz2k8gihlgrf73bmqd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["serde"];
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.22.22";
        edition = "2021";
        sha256 = "1xf7sxfzmnc45f75x302qrn5aph52vc8w226v59yhrm211i8vr2a";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.6.0";
            features = ["std"];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = ["serde"];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        features = {
          "default" = ["parse" "display"];
          "parse" = ["dep:winnow"];
          "perf" = ["dep:kstring"];
          "serde" = ["dep:serde" "toml_datetime/serde" "dep:serde_spanned"];
        };
        resolvedDefaultFeatures = ["display" "parse" "serde"];
      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.40";
        edition = "2018";
        sha256 = "1vv48dac9zgj9650pg2b4d0j3w6f3x9gbggf43scq5hrlysklln3";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "attributes" = ["tracing-attributes"];
          "default" = ["std" "attributes"];
          "log" = ["dep:log"];
          "log-always" = ["log"];
          "std" = ["tracing-core/std"];
          "tracing-attributes" = ["dep:tracing-attributes"];
          "valuable" = ["tracing-core/valuable"];
        };
        resolvedDefaultFeatures = ["attributes" "default" "std" "tracing-attributes"];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.27";
        edition = "2018";
        sha256 = "1rvb5dn9z6d0xdj14r403z0af0bbaqhg02hq4jc97g5wds6lqw1l";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = ["full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro"];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.32";
        edition = "2018";
        sha256 = "0m5aglin3cdwxpvbg6kz0r9r0k31j48n0kcfwsp6l49z26k3svf0";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = ["std" "valuable/std"];
          "once_cell" = ["dep:once_cell"];
          "std" = ["once_cell"];
          "valuable" = ["dep:valuable"];
        };
        resolvedDefaultFeatures = ["default" "once_cell" "std" "valuable"];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "default" = ["log-tracer" "std"];
          "interest-cache" = ["lru" "ahash"];
          "lru" = ["dep:lru"];
          "std" = ["log/std"];
        };
        resolvedDefaultFeatures = ["log-tracer" "std"];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.18";
        edition = "2018";
        sha256 = "12vs1bwk4kig1l2qqjbbn2nm5amwiqmkcmnznylzmnfvjy6083xd";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std" "unicode-case" "unicode-perl"];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = ["log-tracer" "std"];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = ["fmt" "nu-ansi-term"];
          "chrono" = ["dep:chrono"];
          "default" = ["smallvec" "fmt" "ansi" "tracing-log" "std"];
          "env-filter" = ["matchers" "regex" "once_cell" "tracing" "std" "thread_local"];
          "fmt" = ["registry" "std"];
          "json" = ["tracing-serde" "serde" "serde_json"];
          "local-time" = ["time/local-offset"];
          "matchers" = ["dep:matchers"];
          "nu-ansi-term" = ["dep:nu-ansi-term"];
          "once_cell" = ["dep:once_cell"];
          "parking_lot" = ["dep:parking_lot"];
          "regex" = ["dep:regex"];
          "registry" = ["sharded-slab" "thread_local" "std"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "sharded-slab" = ["dep:sharded-slab"];
          "smallvec" = ["dep:smallvec"];
          "std" = ["alloc" "tracing-core/std"];
          "thread_local" = ["dep:thread_local"];
          "time" = ["dep:time"];
          "tracing" = ["dep:tracing"];
          "tracing-log" = ["dep:tracing-log"];
          "tracing-serde" = ["dep:tracing-serde"];
          "valuable" = ["tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable"];
          "valuable-serde" = ["dep:valuable-serde"];
          "valuable_crate" = ["dep:valuable_crate"];
        };
        resolvedDefaultFeatures = ["alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log"];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
      };
      "tungstenite" = rec {
        crateName = "tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "1fbgcv3h4h1bhhf5sqbwqsp7jnc44bi4m41sgmhzdsk2zl8aqgcy";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand";
          }
        ];
        features = {
          "__rustls-tls" = ["rustls"];
          "data-encoding" = ["dep:data-encoding"];
          "default" = ["handshake"];
          "handshake" = ["data-encoding" "http" "httparse" "sha1" "url"];
          "http" = ["dep:http"];
          "httparse" = ["dep:httparse"];
          "native-tls" = ["native-tls-crate"];
          "native-tls-crate" = ["dep:native-tls-crate"];
          "native-tls-vendored" = ["native-tls" "native-tls-crate/vendored"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "rustls-tls-native-roots" = ["__rustls-tls" "rustls-native-certs"];
          "rustls-tls-webpki-roots" = ["__rustls-tls" "webpki-roots"];
          "sha1" = ["dep:sha1"];
          "url" = ["dep:url"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["__rustls-tls" "data-encoding" "handshake" "http" "httparse" "rustls" "sha1" "url"];
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.17.0";
        edition = "2018";
        sha256 = "09dqxv69m9lj9zvv6xw5vxaqx15ps0vxyy5myg33i0kbqvq0pzs2";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = ["dep:scale-info"];
          "scale_info" = ["scale-info/derive"];
        };
      };
      "ubyte" = rec {
        crateName = "ubyte";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1spj3k9sx6xvfn7am9vm1b463hsr79nyvj8asi2grqhyrvvdw87p";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "serde"];
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.7";
        edition = "2021";
        sha256 = "0wc9p07sqwz320848i52nvyjvpsxkx3kv5bfbmm6s35809fdk5i8";
        libName = "ucd_trie";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "uncased" = rec {
        crateName = "uncased";
        version = "0.9.10";
        edition = "2018";
        sha256 = "15q6r6g4fszr8c2lzg9z9k9g52h8g29h24awda3d72cyw37qzf71";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = ["alloc"];
          "serde" = ["dep:serde"];
          "with-serde" = ["serde"];
          "with-serde-alloc" = ["serde" "serde/alloc" "alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "serde" "with-serde-alloc"];
      };
      "unic-char-property" = rec {
        crateName = "unic-char-property";
        version = "0.9.0";
        edition = "2018";
        sha256 = "08g21dn3wwix3ycfl0vrbahn0835nv2q3swm8wms0vwvgm07mid8";
        libName = "unic_char_property";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
        ];
      };
      "unic-char-range" = rec {
        crateName = "unic-char-range";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1g0z7iwvjhqspi6194zsff8vy6i3921hpqcrp3v1813hbwnh5603";
        libName = "unic_char_range";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
          "rayon" = ["dep:rayon"];
          "unstable" = ["exact-size-is-empty" "fused" "trusted-len"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "unic-common" = rec {
        crateName = "unic-common";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1g1mm954m0zr497dl4kx3vr09yaly290zs33bbl4wrbaba1gzmw0";
        libName = "unic_common";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "unic-segment" = rec {
        crateName = "unic-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "08wgz2q6vrdvmbd23kf9pbg8cyzm5q8hq9spc4blzy2ppqk5vvg4";
        libName = "unic_segment";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-segment";
            packageId = "unic-ucd-segment";
          }
        ];
      };
      "unic-ucd-segment" = rec {
        crateName = "unic-ucd-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0027lczcg0r401g6fnzm2bq9fxhgxvri1nlryhhv8192lqic2y90";
        libName = "unic_ucd_segment";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
      };
      "unic-ucd-version" = rec {
        crateName = "unic-ucd-version";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i5hnzpfnxkp4ijfk8kvhpvj84bij575ybqx1b6hyigy6wi2zgcn";
        libName = "unic_ucd_version";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-common";
            packageId = "unic-common";
          }
        ];
      };
      "unicase" = rec {
        crateName = "unicase";
        version = "2.8.0";
        edition = "2018";
        sha256 = "1pznbipizi6yg481167c9mp0xgn1s4cv379pnr9zhmzihf0bclby";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.17";
        edition = "2018";
        sha256 = "14vqdsnrm3y5anj6h5zz5s32w88crraycblb88d9k23k9ns7vcas";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = ["std" "hardcoded-data"];
          "flame" = ["dep:flame"];
          "flame_it" = ["flame" "flamer"];
          "flamer" = ["dep:flamer"];
          "serde" = ["dep:serde"];
          "smallvec" = ["dep:smallvec"];
          "with_serde" = ["serde"];
        };
        resolvedDefaultFeatures = ["hardcoded-data" "std"];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.13";
        edition = "2018";
        sha256 = "1zm1xylzsdfvm2a5ib9li3g5pp7qnkv4amhspydvgbmd9k6mc6z9";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.24";
        edition = "2018";
        sha256 = "0mnrk809z3ix1wspcqy97ld5wxdb31f3xz6nsvg5qcv289ycjcsh";
        libName = "unicode_normalization";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = ["alloc"];
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "untrusted 0.7.1" = rec {
        crateName = "untrusted";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0jkbqaj9d3v5a91pp3wp9mffvng1nhycx6sh4qkdd9qyr62ccmm1";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
      };
      "untrusted 0.9.0" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
      };
      "url" = rec {
        crateName = "url";
        version = "2.5.2";
        edition = "2018";
        sha256 = "0v2dx50mx7xzl9454cl5qmpjnhkbahmn59gd3apyipbgyyylsy12";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = ["std"];
          "derive" = ["valuable-derive"];
          "std" = ["alloc"];
          "valuable-derive" = ["dep:valuable-derive"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["compiler_builtins" "core" "rustc-std-workspace-alloc"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.95";
        edition = "2021";
        sha256 = "0bpbvmxhil380gpv53smaypl8wc7sy7rq8apxfw349pn78v1x38j";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = ["spans" "std"];
          "enable-interning" = ["std"];
          "serde" = ["dep:serde"];
          "serde-serialize" = ["serde" "serde_json" "std"];
          "serde_json" = ["dep:serde_json"];
          "spans" = ["wasm-bindgen-macro/spans"];
          "strict-macro" = ["wasm-bindgen-macro/strict-macro"];
          "xxx_debug_only_print_generated_code" = ["wasm-bindgen-macro/xxx_debug_only_print_generated_code"];
        };
        resolvedDefaultFeatures = ["default" "spans" "std"];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.95";
        edition = "2021";
        sha256 = "0n53wgy78bgzgjwk0z69zbspzhv8p2a4zh69s4fzvpqdrb9x8vfb";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = ["syn/extra-traits"];
        };
        resolvedDefaultFeatures = ["spans"];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.45";
        edition = "2021";
        sha256 = "0fznn43frhq72ci41lgybahv6assvfmqfgnvfiimhwbshbwc8znc";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {
              target,
              features,
            }: (builtins.elem "atomics" targetFeatures);
            features = ["MessageEvent" "Worker"];
          }
        ];
        features = {
          "futures-core" = ["dep:futures-core"];
          "futures-core-03-stream" = ["futures-core"];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.95";
        edition = "2021";
        sha256 = "0mic8b2vab1a91m6x3hjxkwz23094bq1cwhnszarsnlggyz894z7";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = ["wasm-bindgen-macro-support/spans"];
          "strict-macro" = ["wasm-bindgen-macro-support/strict-macro"];
        };
        resolvedDefaultFeatures = ["spans"];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.95";
        edition = "2021";
        sha256 = "0s7g6glb85lyx2pj83shbmg4d50mvqhb2c2qk2j28yigaxbspii6";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["visit" "visit-mut" "full"];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = ["syn/extra-traits"];
          "spans" = ["wasm-bindgen-backend/spans"];
        };
        resolvedDefaultFeatures = ["spans"];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.95";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "1386q7mvv5ky003hcc6yyxpid3y1m7fy0l920i3z3ab60vqhkz35";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];
      };
      "wasmtimer" = rec {
        crateName = "wasmtimer";
        version = "0.2.1";
        edition = "2021";
        sha256 = "1vl0dxzr7xbnycrak4yd6f9h5lpkfsibbd5zf96mkyy72n5rvvf7";
        authors = [
          "WhizSid <whizsid@aol.com>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "default" = ["tokio" "tokio-util"];
          "futures" = ["dep:futures"];
          "parking_lot" = ["dep:parking_lot"];
          "pin-utils" = ["dep:pin-utils"];
          "serde" = ["serde_crate"];
          "serde_crate" = ["dep:serde_crate"];
          "slab" = ["dep:slab"];
          "tokio" = ["futures" "parking_lot" "pin-utils"];
          "tokio-test-util" = ["tokio"];
          "tokio-util" = ["slab" "tokio"];
        };
        resolvedDefaultFeatures = ["default" "futures" "parking_lot" "pin-utils" "slab" "tokio" "tokio-util"];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.72";
        edition = "2021";
        sha256 = "04k19hilj9r8sx6q20fz853149gfpmf83yk2zvq0s14c2288nj7n";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = ["EventTarget"];
          "AnalyserNode" = ["AudioNode" "EventTarget"];
          "Animation" = ["EventTarget"];
          "AnimationEvent" = ["Event"];
          "AnimationPlaybackEvent" = ["Event"];
          "Attr" = ["EventTarget" "Node"];
          "AudioBufferSourceNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "AudioContext" = ["BaseAudioContext" "EventTarget"];
          "AudioDestinationNode" = ["AudioNode" "EventTarget"];
          "AudioNode" = ["EventTarget"];
          "AudioProcessingEvent" = ["Event"];
          "AudioScheduledSourceNode" = ["AudioNode" "EventTarget"];
          "AudioStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "AudioTrackList" = ["EventTarget"];
          "AudioWorklet" = ["Worklet"];
          "AudioWorkletGlobalScope" = ["WorkletGlobalScope"];
          "AudioWorkletNode" = ["AudioNode" "EventTarget"];
          "AuthenticatorAssertionResponse" = ["AuthenticatorResponse"];
          "AuthenticatorAttestationResponse" = ["AuthenticatorResponse"];
          "BaseAudioContext" = ["EventTarget"];
          "BatteryManager" = ["EventTarget"];
          "BeforeUnloadEvent" = ["Event"];
          "BiquadFilterNode" = ["AudioNode" "EventTarget"];
          "BlobEvent" = ["Event"];
          "Bluetooth" = ["EventTarget"];
          "BluetoothAdvertisingEvent" = ["Event"];
          "BluetoothDevice" = ["EventTarget"];
          "BluetoothPermissionResult" = ["EventTarget" "PermissionStatus"];
          "BluetoothRemoteGattCharacteristic" = ["EventTarget"];
          "BluetoothRemoteGattService" = ["EventTarget"];
          "BroadcastChannel" = ["EventTarget"];
          "CanvasCaptureMediaStream" = ["EventTarget" "MediaStream"];
          "CanvasCaptureMediaStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "CdataSection" = ["CharacterData" "EventTarget" "Node" "Text"];
          "ChannelMergerNode" = ["AudioNode" "EventTarget"];
          "ChannelSplitterNode" = ["AudioNode" "EventTarget"];
          "CharacterData" = ["EventTarget" "Node"];
          "ChromeWorker" = ["EventTarget" "Worker"];
          "Clipboard" = ["EventTarget"];
          "ClipboardEvent" = ["Event"];
          "CloseEvent" = ["Event"];
          "Comment" = ["CharacterData" "EventTarget" "Node"];
          "CompositionEvent" = ["Event" "UiEvent"];
          "ConstantSourceNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "ConvolverNode" = ["AudioNode" "EventTarget"];
          "CssAnimation" = ["Animation" "EventTarget"];
          "CssConditionRule" = ["CssGroupingRule" "CssRule"];
          "CssCounterStyleRule" = ["CssRule"];
          "CssFontFaceRule" = ["CssRule"];
          "CssFontFeatureValuesRule" = ["CssRule"];
          "CssGroupingRule" = ["CssRule"];
          "CssImportRule" = ["CssRule"];
          "CssKeyframeRule" = ["CssRule"];
          "CssKeyframesRule" = ["CssRule"];
          "CssMediaRule" = ["CssConditionRule" "CssGroupingRule" "CssRule"];
          "CssNamespaceRule" = ["CssRule"];
          "CssPageRule" = ["CssRule"];
          "CssStyleRule" = ["CssRule"];
          "CssStyleSheet" = ["StyleSheet"];
          "CssSupportsRule" = ["CssConditionRule" "CssGroupingRule" "CssRule"];
          "CssTransition" = ["Animation" "EventTarget"];
          "CustomEvent" = ["Event"];
          "DedicatedWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "DelayNode" = ["AudioNode" "EventTarget"];
          "DeviceLightEvent" = ["Event"];
          "DeviceMotionEvent" = ["Event"];
          "DeviceOrientationEvent" = ["Event"];
          "DeviceProximityEvent" = ["Event"];
          "Document" = ["EventTarget" "Node"];
          "DocumentFragment" = ["EventTarget" "Node"];
          "DocumentTimeline" = ["AnimationTimeline"];
          "DocumentType" = ["EventTarget" "Node"];
          "DomMatrix" = ["DomMatrixReadOnly"];
          "DomPoint" = ["DomPointReadOnly"];
          "DomRect" = ["DomRectReadOnly"];
          "DomRequest" = ["EventTarget"];
          "DragEvent" = ["Event" "MouseEvent" "UiEvent"];
          "DynamicsCompressorNode" = ["AudioNode" "EventTarget"];
          "Element" = ["EventTarget" "Node"];
          "ErrorEvent" = ["Event"];
          "EventSource" = ["EventTarget"];
          "ExtendableEvent" = ["Event"];
          "ExtendableMessageEvent" = ["Event" "ExtendableEvent"];
          "FetchEvent" = ["Event" "ExtendableEvent"];
          "FetchObserver" = ["EventTarget"];
          "File" = ["Blob"];
          "FileReader" = ["EventTarget"];
          "FileSystemDirectoryEntry" = ["FileSystemEntry"];
          "FileSystemDirectoryHandle" = ["FileSystemHandle"];
          "FileSystemFileEntry" = ["FileSystemEntry"];
          "FileSystemFileHandle" = ["FileSystemHandle"];
          "FileSystemWritableFileStream" = ["WritableStream"];
          "FocusEvent" = ["Event" "UiEvent"];
          "FontFaceSet" = ["EventTarget"];
          "FontFaceSetLoadEvent" = ["Event"];
          "GainNode" = ["AudioNode" "EventTarget"];
          "GamepadEvent" = ["Event"];
          "GpuDevice" = ["EventTarget"];
          "GpuInternalError" = ["GpuError"];
          "GpuOutOfMemoryError" = ["GpuError"];
          "GpuPipelineError" = ["DomException"];
          "GpuUncapturedErrorEvent" = ["Event"];
          "GpuValidationError" = ["GpuError"];
          "HashChangeEvent" = ["Event"];
          "Hid" = ["EventTarget"];
          "HidConnectionEvent" = ["Event"];
          "HidDevice" = ["EventTarget"];
          "HidInputReportEvent" = ["Event"];
          "HtmlAnchorElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlAreaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlAudioElement" = ["Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node"];
          "HtmlBaseElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlBodyElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlBrElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlButtonElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlCanvasElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDataElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDataListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDetailsElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDialogElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDirectoryElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDivElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDocument" = ["Document" "EventTarget" "Node"];
          "HtmlElement" = ["Element" "EventTarget" "Node"];
          "HtmlEmbedElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFieldSetElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFontElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFormControlsCollection" = ["HtmlCollection"];
          "HtmlFormElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFrameElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFrameSetElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHeadElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHeadingElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHrElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHtmlElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlIFrameElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlImageElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlInputElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLabelElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLegendElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLiElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLinkElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMapElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMediaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMenuElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMenuItemElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMetaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMeterElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlModElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlObjectElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptGroupElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptionsCollection" = ["HtmlCollection"];
          "HtmlOutputElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlParagraphElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlParamElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlPictureElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlPreElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlProgressElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlQuoteElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlScriptElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSelectElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSlotElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSourceElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSpanElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlStyleElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableCaptionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableCellElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableColElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableRowElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableSectionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTemplateElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTextAreaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTimeElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTitleElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTrackElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlUListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlUnknownElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlVideoElement" = ["Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node"];
          "IdbCursorWithValue" = ["IdbCursor"];
          "IdbDatabase" = ["EventTarget"];
          "IdbFileHandle" = ["EventTarget"];
          "IdbFileRequest" = ["DomRequest" "EventTarget"];
          "IdbLocaleAwareKeyRange" = ["IdbKeyRange"];
          "IdbMutableFile" = ["EventTarget"];
          "IdbOpenDbRequest" = ["EventTarget" "IdbRequest"];
          "IdbRequest" = ["EventTarget"];
          "IdbTransaction" = ["EventTarget"];
          "IdbVersionChangeEvent" = ["Event"];
          "IirFilterNode" = ["AudioNode" "EventTarget"];
          "ImageCaptureErrorEvent" = ["Event"];
          "ImageTrack" = ["EventTarget"];
          "InputDeviceInfo" = ["MediaDeviceInfo"];
          "InputEvent" = ["Event" "UiEvent"];
          "KeyFrameRequestEvent" = ["Event"];
          "KeyboardEvent" = ["Event" "UiEvent"];
          "KeyframeEffect" = ["AnimationEffect"];
          "LocalMediaStream" = ["EventTarget" "MediaStream"];
          "MediaDevices" = ["EventTarget"];
          "MediaElementAudioSourceNode" = ["AudioNode" "EventTarget"];
          "MediaEncryptedEvent" = ["Event"];
          "MediaKeyError" = ["Event"];
          "MediaKeyMessageEvent" = ["Event"];
          "MediaKeySession" = ["EventTarget"];
          "MediaQueryList" = ["EventTarget"];
          "MediaQueryListEvent" = ["Event"];
          "MediaRecorder" = ["EventTarget"];
          "MediaRecorderErrorEvent" = ["Event"];
          "MediaSource" = ["EventTarget"];
          "MediaStream" = ["EventTarget"];
          "MediaStreamAudioDestinationNode" = ["AudioNode" "EventTarget"];
          "MediaStreamAudioSourceNode" = ["AudioNode" "EventTarget"];
          "MediaStreamEvent" = ["Event"];
          "MediaStreamTrack" = ["EventTarget"];
          "MediaStreamTrackEvent" = ["Event"];
          "MediaStreamTrackGenerator" = ["EventTarget" "MediaStreamTrack"];
          "MessageEvent" = ["Event"];
          "MessagePort" = ["EventTarget"];
          "MidiAccess" = ["EventTarget"];
          "MidiConnectionEvent" = ["Event"];
          "MidiInput" = ["EventTarget" "MidiPort"];
          "MidiMessageEvent" = ["Event"];
          "MidiOutput" = ["EventTarget" "MidiPort"];
          "MidiPort" = ["EventTarget"];
          "MouseEvent" = ["Event" "UiEvent"];
          "MouseScrollEvent" = ["Event" "MouseEvent" "UiEvent"];
          "MutationEvent" = ["Event"];
          "NetworkInformation" = ["EventTarget"];
          "Node" = ["EventTarget"];
          "Notification" = ["EventTarget"];
          "NotificationEvent" = ["Event" "ExtendableEvent"];
          "OfflineAudioCompletionEvent" = ["Event"];
          "OfflineAudioContext" = ["BaseAudioContext" "EventTarget"];
          "OfflineResourceList" = ["EventTarget"];
          "OffscreenCanvas" = ["EventTarget"];
          "OscillatorNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "PageTransitionEvent" = ["Event"];
          "PaintWorkletGlobalScope" = ["WorkletGlobalScope"];
          "PannerNode" = ["AudioNode" "EventTarget"];
          "PaymentMethodChangeEvent" = ["Event" "PaymentRequestUpdateEvent"];
          "PaymentRequestUpdateEvent" = ["Event"];
          "Performance" = ["EventTarget"];
          "PerformanceMark" = ["PerformanceEntry"];
          "PerformanceMeasure" = ["PerformanceEntry"];
          "PerformanceNavigationTiming" = ["PerformanceEntry" "PerformanceResourceTiming"];
          "PerformanceResourceTiming" = ["PerformanceEntry"];
          "PermissionStatus" = ["EventTarget"];
          "PointerEvent" = ["Event" "MouseEvent" "UiEvent"];
          "PopStateEvent" = ["Event"];
          "PopupBlockedEvent" = ["Event"];
          "PresentationAvailability" = ["EventTarget"];
          "PresentationConnection" = ["EventTarget"];
          "PresentationConnectionAvailableEvent" = ["Event"];
          "PresentationConnectionCloseEvent" = ["Event"];
          "PresentationConnectionList" = ["EventTarget"];
          "PresentationRequest" = ["EventTarget"];
          "ProcessingInstruction" = ["CharacterData" "EventTarget" "Node"];
          "ProgressEvent" = ["Event"];
          "PromiseRejectionEvent" = ["Event"];
          "PublicKeyCredential" = ["Credential"];
          "PushEvent" = ["Event" "ExtendableEvent"];
          "RadioNodeList" = ["NodeList"];
          "RtcDataChannel" = ["EventTarget"];
          "RtcDataChannelEvent" = ["Event"];
          "RtcPeerConnection" = ["EventTarget"];
          "RtcPeerConnectionIceErrorEvent" = ["Event"];
          "RtcPeerConnectionIceEvent" = ["Event"];
          "RtcRtpScriptTransformer" = ["EventTarget"];
          "RtcTrackEvent" = ["Event"];
          "RtcTransformEvent" = ["Event"];
          "RtcdtmfSender" = ["EventTarget"];
          "RtcdtmfToneChangeEvent" = ["Event"];
          "SFrameTransform" = ["EventTarget"];
          "SFrameTransformErrorEvent" = ["Event"];
          "Screen" = ["EventTarget"];
          "ScreenOrientation" = ["EventTarget"];
          "ScriptProcessorNode" = ["AudioNode" "EventTarget"];
          "ScrollAreaEvent" = ["Event" "UiEvent"];
          "SecurityPolicyViolationEvent" = ["Event"];
          "Serial" = ["EventTarget"];
          "SerialPort" = ["EventTarget"];
          "ServiceWorker" = ["EventTarget"];
          "ServiceWorkerContainer" = ["EventTarget"];
          "ServiceWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "ServiceWorkerRegistration" = ["EventTarget"];
          "ShadowRoot" = ["DocumentFragment" "EventTarget" "Node"];
          "SharedWorker" = ["EventTarget"];
          "SharedWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "SourceBuffer" = ["EventTarget"];
          "SourceBufferList" = ["EventTarget"];
          "SpeechRecognition" = ["EventTarget"];
          "SpeechRecognitionError" = ["Event"];
          "SpeechRecognitionEvent" = ["Event"];
          "SpeechSynthesis" = ["EventTarget"];
          "SpeechSynthesisErrorEvent" = ["Event" "SpeechSynthesisEvent"];
          "SpeechSynthesisEvent" = ["Event"];
          "SpeechSynthesisUtterance" = ["EventTarget"];
          "StereoPannerNode" = ["AudioNode" "EventTarget"];
          "StorageEvent" = ["Event"];
          "SubmitEvent" = ["Event"];
          "SvgAnimateElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimateMotionElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimateTransformElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimationElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgCircleElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgClipPathElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgComponentTransferFunctionElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgDefsElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgDescElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgElement" = ["Element" "EventTarget" "Node"];
          "SvgEllipseElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgFilterElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgForeignObjectElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgGeometryElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgGradientElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgGraphicsElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgImageElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgLineElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgLinearGradientElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement"];
          "SvgMarkerElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgMaskElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgMetadataElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgPathElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgPathSegArcAbs" = ["SvgPathSeg"];
          "SvgPathSegArcRel" = ["SvgPathSeg"];
          "SvgPathSegClosePath" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicSmoothAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicSmoothRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticSmoothRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoHorizontalAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoHorizontalRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoVerticalAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoVerticalRel" = ["SvgPathSeg"];
          "SvgPathSegMovetoAbs" = ["SvgPathSeg"];
          "SvgPathSegMovetoRel" = ["SvgPathSeg"];
          "SvgPatternElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgPolygonElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgPolylineElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgRadialGradientElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement"];
          "SvgRectElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgScriptElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgSetElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgStopElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgStyleElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgSwitchElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgSymbolElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgTextContentElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgTextElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement"];
          "SvgTextPathElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement"];
          "SvgTextPositioningElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement"];
          "SvgTitleElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgUseElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgViewElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgaElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgfeBlendElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeColorMatrixElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeComponentTransferElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeCompositeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeConvolveMatrixElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDiffuseLightingElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDisplacementMapElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDistantLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDropShadowElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeFloodElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeFuncAElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncBElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncGElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncRElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeGaussianBlurElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeImageElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMergeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMergeNodeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMorphologyElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeOffsetElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfePointLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeSpecularLightingElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeSpotLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeTileElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeTurbulenceElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvggElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgmPathElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgsvgElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgtSpanElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement"];
          "TaskController" = ["AbortController"];
          "TaskPriorityChangeEvent" = ["Event"];
          "TaskSignal" = ["AbortSignal" "EventTarget"];
          "TcpServerSocket" = ["EventTarget"];
          "TcpServerSocketEvent" = ["Event"];
          "TcpSocket" = ["EventTarget"];
          "TcpSocketErrorEvent" = ["Event"];
          "TcpSocketEvent" = ["Event"];
          "Text" = ["CharacterData" "EventTarget" "Node"];
          "TextTrack" = ["EventTarget"];
          "TextTrackCue" = ["EventTarget"];
          "TextTrackList" = ["EventTarget"];
          "TimeEvent" = ["Event"];
          "ToggleEvent" = ["Event"];
          "TouchEvent" = ["Event" "UiEvent"];
          "TrackEvent" = ["Event"];
          "TransitionEvent" = ["Event"];
          "UiEvent" = ["Event"];
          "Usb" = ["EventTarget"];
          "UsbConnectionEvent" = ["Event"];
          "UsbPermissionResult" = ["EventTarget" "PermissionStatus"];
          "UserProximityEvent" = ["Event"];
          "ValueEvent" = ["Event"];
          "VideoStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "VideoTrackList" = ["EventTarget"];
          "VisualViewport" = ["EventTarget"];
          "VrDisplay" = ["EventTarget"];
          "VttCue" = ["EventTarget" "TextTrackCue"];
          "WakeLockSentinel" = ["EventTarget"];
          "WaveShaperNode" = ["AudioNode" "EventTarget"];
          "WebGlContextEvent" = ["Event"];
          "WebKitCssMatrix" = ["DomMatrix" "DomMatrixReadOnly"];
          "WebSocket" = ["EventTarget"];
          "WebTransportError" = ["DomException"];
          "WebTransportReceiveStream" = ["ReadableStream"];
          "WebTransportSendStream" = ["WritableStream"];
          "WheelEvent" = ["Event" "MouseEvent" "UiEvent"];
          "Window" = ["EventTarget"];
          "WindowClient" = ["Client"];
          "Worker" = ["EventTarget"];
          "WorkerDebuggerGlobalScope" = ["EventTarget"];
          "WorkerGlobalScope" = ["EventTarget"];
          "XmlDocument" = ["Document" "EventTarget" "Node"];
          "XmlHttpRequest" = ["EventTarget" "XmlHttpRequestEventTarget"];
          "XmlHttpRequestEventTarget" = ["EventTarget"];
          "XmlHttpRequestUpload" = ["EventTarget" "XmlHttpRequestEventTarget"];
          "XrBoundedReferenceSpace" = ["EventTarget" "XrReferenceSpace" "XrSpace"];
          "XrInputSourceEvent" = ["Event"];
          "XrInputSourcesChangeEvent" = ["Event"];
          "XrJointPose" = ["XrPose"];
          "XrJointSpace" = ["EventTarget" "XrSpace"];
          "XrLayer" = ["EventTarget"];
          "XrPermissionStatus" = ["EventTarget" "PermissionStatus"];
          "XrReferenceSpace" = ["EventTarget" "XrSpace"];
          "XrReferenceSpaceEvent" = ["Event"];
          "XrSession" = ["EventTarget"];
          "XrSessionEvent" = ["Event"];
          "XrSpace" = ["EventTarget"];
          "XrSystem" = ["EventTarget"];
          "XrViewerPose" = ["XrPose"];
          "XrWebGlLayer" = ["EventTarget" "XrLayer"];
        };
        resolvedDefaultFeatures = ["AbortController" "AbortSignal" "BinaryType" "Blob" "BlobPropertyBag" "CloseEvent" "Crypto" "DomException" "Event" "EventTarget" "File" "FormData" "Headers" "MessageEvent" "ReadableStream" "Request" "RequestCredentials" "RequestInit" "RequestMode" "Response" "ServiceWorkerGlobalScope" "WebSocket" "Window" "Worker" "WorkerGlobalScope" "console"];
      };
      "webpki-roots 0.25.4" = rec {
        crateName = "webpki-roots";
        version = "0.25.4";
        edition = "2018";
        sha256 = "1qgqa615gc1cgklls4bkjp9jv9pvv3jnl82lc6wd7dkximywa82z";
        libName = "webpki_roots";
      };
      "webpki-roots 0.26.6" = rec {
        crateName = "webpki-roots";
        version = "0.26.6";
        edition = "2018";
        sha256 = "0n5985cgqrzm2a1si6rii5jrp3z7y3cfizgy9lfqywbpy6znf744";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = ["impl-debug"];
        };
        resolvedDefaultFeatures = ["consoleapi" "errhandlingapi" "fileapi" "handleapi" "ntsecapi" "processenv" "sysinfoapi" "wtypesbase"];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation"];
          }
        ];
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
      };
      "windows" = rec {
        crateName = "windows";
        version = "0.48.0";
        edition = "2018";
        sha256 = "03vh89ilnxdxdh0n9np4ns4m10fvm93h3b0cc05ipg3qq1mqi1p6";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "AI_MachineLearning" = ["AI"];
          "ApplicationModel_Activation" = ["ApplicationModel"];
          "ApplicationModel_AppExtensions" = ["ApplicationModel"];
          "ApplicationModel_AppService" = ["ApplicationModel"];
          "ApplicationModel_Appointments" = ["ApplicationModel"];
          "ApplicationModel_Appointments_AppointmentsProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Appointments_DataProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Background" = ["ApplicationModel"];
          "ApplicationModel_Calls" = ["ApplicationModel"];
          "ApplicationModel_Calls_Background" = ["ApplicationModel_Calls"];
          "ApplicationModel_Calls_Provider" = ["ApplicationModel_Calls"];
          "ApplicationModel_Chat" = ["ApplicationModel"];
          "ApplicationModel_CommunicationBlocking" = ["ApplicationModel"];
          "ApplicationModel_Contacts" = ["ApplicationModel"];
          "ApplicationModel_Contacts_DataProvider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_Contacts_Provider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_ConversationalAgent" = ["ApplicationModel"];
          "ApplicationModel_Core" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer_DragDrop" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_DataTransfer_DragDrop_Core" = ["ApplicationModel_DataTransfer_DragDrop"];
          "ApplicationModel_DataTransfer_ShareTarget" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_Email" = ["ApplicationModel"];
          "ApplicationModel_Email_DataProvider" = ["ApplicationModel_Email"];
          "ApplicationModel_ExtendedExecution" = ["ApplicationModel"];
          "ApplicationModel_ExtendedExecution_Foreground" = ["ApplicationModel_ExtendedExecution"];
          "ApplicationModel_Holographic" = ["ApplicationModel"];
          "ApplicationModel_LockScreen" = ["ApplicationModel"];
          "ApplicationModel_Payments" = ["ApplicationModel"];
          "ApplicationModel_Payments_Provider" = ["ApplicationModel_Payments"];
          "ApplicationModel_Preview" = ["ApplicationModel"];
          "ApplicationModel_Preview_Holographic" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_InkWorkspace" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_Notes" = ["ApplicationModel_Preview"];
          "ApplicationModel_Resources" = ["ApplicationModel"];
          "ApplicationModel_Resources_Core" = ["ApplicationModel_Resources"];
          "ApplicationModel_Resources_Management" = ["ApplicationModel_Resources"];
          "ApplicationModel_Search" = ["ApplicationModel"];
          "ApplicationModel_Search_Core" = ["ApplicationModel_Search"];
          "ApplicationModel_Store" = ["ApplicationModel"];
          "ApplicationModel_Store_LicenseManagement" = ["ApplicationModel_Store"];
          "ApplicationModel_Store_Preview" = ["ApplicationModel_Store"];
          "ApplicationModel_Store_Preview_InstallControl" = ["ApplicationModel_Store_Preview"];
          "ApplicationModel_UserActivities" = ["ApplicationModel"];
          "ApplicationModel_UserActivities_Core" = ["ApplicationModel_UserActivities"];
          "ApplicationModel_UserDataAccounts" = ["ApplicationModel"];
          "ApplicationModel_UserDataAccounts_Provider" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataAccounts_SystemAccess" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataTasks" = ["ApplicationModel"];
          "ApplicationModel_UserDataTasks_DataProvider" = ["ApplicationModel_UserDataTasks"];
          "ApplicationModel_VoiceCommands" = ["ApplicationModel"];
          "ApplicationModel_Wallet" = ["ApplicationModel"];
          "ApplicationModel_Wallet_System" = ["ApplicationModel_Wallet"];
          "Data_Html" = ["Data"];
          "Data_Json" = ["Data"];
          "Data_Pdf" = ["Data"];
          "Data_Text" = ["Data"];
          "Data_Xml" = ["Data"];
          "Data_Xml_Dom" = ["Data_Xml"];
          "Data_Xml_Xsl" = ["Data_Xml"];
          "Devices_Adc" = ["Devices"];
          "Devices_Adc_Provider" = ["Devices_Adc"];
          "Devices_Background" = ["Devices"];
          "Devices_Bluetooth" = ["Devices"];
          "Devices_Bluetooth_Advertisement" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Background" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_GenericAttributeProfile" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Rfcomm" = ["Devices_Bluetooth"];
          "Devices_Custom" = ["Devices"];
          "Devices_Display" = ["Devices"];
          "Devices_Display_Core" = ["Devices_Display"];
          "Devices_Enumeration" = ["Devices"];
          "Devices_Enumeration_Pnp" = ["Devices_Enumeration"];
          "Devices_Geolocation" = ["Devices"];
          "Devices_Geolocation_Geofencing" = ["Devices_Geolocation"];
          "Devices_Geolocation_Provider" = ["Devices_Geolocation"];
          "Devices_Gpio" = ["Devices"];
          "Devices_Gpio_Provider" = ["Devices_Gpio"];
          "Devices_Haptics" = ["Devices"];
          "Devices_HumanInterfaceDevice" = ["Devices"];
          "Devices_I2c" = ["Devices"];
          "Devices_I2c_Provider" = ["Devices_I2c"];
          "Devices_Input" = ["Devices"];
          "Devices_Input_Preview" = ["Devices_Input"];
          "Devices_Lights" = ["Devices"];
          "Devices_Lights_Effects" = ["Devices_Lights"];
          "Devices_Midi" = ["Devices"];
          "Devices_PointOfService" = ["Devices"];
          "Devices_PointOfService_Provider" = ["Devices_PointOfService"];
          "Devices_Portable" = ["Devices"];
          "Devices_Power" = ["Devices"];
          "Devices_Printers" = ["Devices"];
          "Devices_Printers_Extensions" = ["Devices_Printers"];
          "Devices_Pwm" = ["Devices"];
          "Devices_Pwm_Provider" = ["Devices_Pwm"];
          "Devices_Radios" = ["Devices"];
          "Devices_Scanners" = ["Devices"];
          "Devices_Sensors" = ["Devices"];
          "Devices_Sensors_Custom" = ["Devices_Sensors"];
          "Devices_SerialCommunication" = ["Devices"];
          "Devices_SmartCards" = ["Devices"];
          "Devices_Sms" = ["Devices"];
          "Devices_Spi" = ["Devices"];
          "Devices_Spi_Provider" = ["Devices_Spi"];
          "Devices_Usb" = ["Devices"];
          "Devices_WiFi" = ["Devices"];
          "Devices_WiFiDirect" = ["Devices"];
          "Devices_WiFiDirect_Services" = ["Devices_WiFiDirect"];
          "Embedded_DeviceLockdown" = ["Embedded"];
          "Foundation_Collections" = ["Foundation"];
          "Foundation_Diagnostics" = ["Foundation"];
          "Foundation_Metadata" = ["Foundation"];
          "Foundation_Numerics" = ["Foundation"];
          "Gaming_Input" = ["Gaming"];
          "Gaming_Input_Custom" = ["Gaming_Input"];
          "Gaming_Input_ForceFeedback" = ["Gaming_Input"];
          "Gaming_Input_Preview" = ["Gaming_Input"];
          "Gaming_Preview" = ["Gaming"];
          "Gaming_Preview_GamesEnumeration" = ["Gaming_Preview"];
          "Gaming_UI" = ["Gaming"];
          "Gaming_XboxLive" = ["Gaming"];
          "Gaming_XboxLive_Storage" = ["Gaming_XboxLive"];
          "Globalization_Collation" = ["Globalization"];
          "Globalization_DateTimeFormatting" = ["Globalization"];
          "Globalization_Fonts" = ["Globalization"];
          "Globalization_NumberFormatting" = ["Globalization"];
          "Globalization_PhoneNumberFormatting" = ["Globalization"];
          "Graphics_Capture" = ["Graphics"];
          "Graphics_DirectX" = ["Graphics"];
          "Graphics_DirectX_Direct3D11" = ["Graphics_DirectX"];
          "Graphics_Display" = ["Graphics"];
          "Graphics_Display_Core" = ["Graphics_Display"];
          "Graphics_Effects" = ["Graphics"];
          "Graphics_Holographic" = ["Graphics"];
          "Graphics_Imaging" = ["Graphics"];
          "Graphics_Printing" = ["Graphics"];
          "Graphics_Printing3D" = ["Graphics"];
          "Graphics_Printing_OptionDetails" = ["Graphics_Printing"];
          "Graphics_Printing_PrintSupport" = ["Graphics_Printing"];
          "Graphics_Printing_PrintTicket" = ["Graphics_Printing"];
          "Graphics_Printing_Workflow" = ["Graphics_Printing"];
          "Management_Core" = ["Management"];
          "Management_Deployment" = ["Management"];
          "Management_Deployment_Preview" = ["Management_Deployment"];
          "Management_Policies" = ["Management"];
          "Management_Update" = ["Management"];
          "Management_Workplace" = ["Management"];
          "Media_AppBroadcasting" = ["Media"];
          "Media_AppRecording" = ["Media"];
          "Media_Audio" = ["Media"];
          "Media_Capture" = ["Media"];
          "Media_Capture_Core" = ["Media_Capture"];
          "Media_Capture_Frames" = ["Media_Capture"];
          "Media_Casting" = ["Media"];
          "Media_ClosedCaptioning" = ["Media"];
          "Media_ContentRestrictions" = ["Media"];
          "Media_Control" = ["Media"];
          "Media_Core" = ["Media"];
          "Media_Core_Preview" = ["Media_Core"];
          "Media_Devices" = ["Media"];
          "Media_Devices_Core" = ["Media_Devices"];
          "Media_DialProtocol" = ["Media"];
          "Media_Editing" = ["Media"];
          "Media_Effects" = ["Media"];
          "Media_FaceAnalysis" = ["Media"];
          "Media_Import" = ["Media"];
          "Media_MediaProperties" = ["Media"];
          "Media_Miracast" = ["Media"];
          "Media_Ocr" = ["Media"];
          "Media_PlayTo" = ["Media"];
          "Media_Playback" = ["Media"];
          "Media_Playlists" = ["Media"];
          "Media_Protection" = ["Media"];
          "Media_Protection_PlayReady" = ["Media_Protection"];
          "Media_Render" = ["Media"];
          "Media_SpeechRecognition" = ["Media"];
          "Media_SpeechSynthesis" = ["Media"];
          "Media_Streaming" = ["Media"];
          "Media_Streaming_Adaptive" = ["Media_Streaming"];
          "Media_Transcoding" = ["Media"];
          "Networking_BackgroundTransfer" = ["Networking"];
          "Networking_Connectivity" = ["Networking"];
          "Networking_NetworkOperators" = ["Networking"];
          "Networking_Proximity" = ["Networking"];
          "Networking_PushNotifications" = ["Networking"];
          "Networking_ServiceDiscovery" = ["Networking"];
          "Networking_ServiceDiscovery_Dnssd" = ["Networking_ServiceDiscovery"];
          "Networking_Sockets" = ["Networking"];
          "Networking_Vpn" = ["Networking"];
          "Networking_XboxLive" = ["Networking"];
          "Perception_Automation" = ["Perception"];
          "Perception_Automation_Core" = ["Perception_Automation"];
          "Perception_People" = ["Perception"];
          "Perception_Spatial" = ["Perception"];
          "Perception_Spatial_Preview" = ["Perception_Spatial"];
          "Perception_Spatial_Surfaces" = ["Perception_Spatial"];
          "Phone_ApplicationModel" = ["Phone"];
          "Phone_Devices" = ["Phone"];
          "Phone_Devices_Notification" = ["Phone_Devices"];
          "Phone_Devices_Power" = ["Phone_Devices"];
          "Phone_Management" = ["Phone"];
          "Phone_Management_Deployment" = ["Phone_Management"];
          "Phone_Media" = ["Phone"];
          "Phone_Media_Devices" = ["Phone_Media"];
          "Phone_Notification" = ["Phone"];
          "Phone_Notification_Management" = ["Phone_Notification"];
          "Phone_PersonalInformation" = ["Phone"];
          "Phone_PersonalInformation_Provisioning" = ["Phone_PersonalInformation"];
          "Phone_Speech" = ["Phone"];
          "Phone_Speech_Recognition" = ["Phone_Speech"];
          "Phone_StartScreen" = ["Phone"];
          "Phone_System" = ["Phone"];
          "Phone_System_Power" = ["Phone_System"];
          "Phone_System_Profile" = ["Phone_System"];
          "Phone_System_UserProfile" = ["Phone_System"];
          "Phone_System_UserProfile_GameServices" = ["Phone_System_UserProfile"];
          "Phone_System_UserProfile_GameServices_Core" = ["Phone_System_UserProfile_GameServices"];
          "Phone_UI" = ["Phone"];
          "Phone_UI_Input" = ["Phone_UI"];
          "Security_Authentication" = ["Security"];
          "Security_Authentication_Identity" = ["Security_Authentication"];
          "Security_Authentication_Identity_Core" = ["Security_Authentication_Identity"];
          "Security_Authentication_OnlineId" = ["Security_Authentication"];
          "Security_Authentication_Web" = ["Security_Authentication"];
          "Security_Authentication_Web_Core" = ["Security_Authentication_Web"];
          "Security_Authentication_Web_Provider" = ["Security_Authentication_Web"];
          "Security_Authorization" = ["Security"];
          "Security_Authorization_AppCapabilityAccess" = ["Security_Authorization"];
          "Security_Credentials" = ["Security"];
          "Security_Credentials_UI" = ["Security_Credentials"];
          "Security_Cryptography" = ["Security"];
          "Security_Cryptography_Certificates" = ["Security_Cryptography"];
          "Security_Cryptography_Core" = ["Security_Cryptography"];
          "Security_Cryptography_DataProtection" = ["Security_Cryptography"];
          "Security_DataProtection" = ["Security"];
          "Security_EnterpriseData" = ["Security"];
          "Security_ExchangeActiveSyncProvisioning" = ["Security"];
          "Security_Isolation" = ["Security"];
          "Services_Maps" = ["Services"];
          "Services_Maps_Guidance" = ["Services_Maps"];
          "Services_Maps_LocalSearch" = ["Services_Maps"];
          "Services_Maps_OfflineMaps" = ["Services_Maps"];
          "Services_Store" = ["Services"];
          "Services_TargetedContent" = ["Services"];
          "Storage_AccessCache" = ["Storage"];
          "Storage_BulkAccess" = ["Storage"];
          "Storage_Compression" = ["Storage"];
          "Storage_FileProperties" = ["Storage"];
          "Storage_Pickers" = ["Storage"];
          "Storage_Pickers_Provider" = ["Storage_Pickers"];
          "Storage_Provider" = ["Storage"];
          "Storage_Search" = ["Storage"];
          "Storage_Streams" = ["Storage"];
          "System_Diagnostics" = ["System"];
          "System_Diagnostics_DevicePortal" = ["System_Diagnostics"];
          "System_Diagnostics_Telemetry" = ["System_Diagnostics"];
          "System_Diagnostics_TraceReporting" = ["System_Diagnostics"];
          "System_Display" = ["System"];
          "System_Implementation" = ["System"];
          "System_Implementation_FileExplorer" = ["System_Implementation"];
          "System_Inventory" = ["System"];
          "System_Power" = ["System"];
          "System_Profile" = ["System"];
          "System_Profile_SystemManufacturers" = ["System_Profile"];
          "System_RemoteDesktop" = ["System"];
          "System_RemoteDesktop_Input" = ["System_RemoteDesktop"];
          "System_RemoteSystems" = ["System"];
          "System_Threading" = ["System"];
          "System_Threading_Core" = ["System_Threading"];
          "System_Update" = ["System"];
          "System_UserProfile" = ["System"];
          "UI_Accessibility" = ["UI"];
          "UI_ApplicationSettings" = ["UI"];
          "UI_Composition" = ["UI"];
          "UI_Composition_Core" = ["UI_Composition"];
          "UI_Composition_Desktop" = ["UI_Composition"];
          "UI_Composition_Diagnostics" = ["UI_Composition"];
          "UI_Composition_Effects" = ["UI_Composition"];
          "UI_Composition_Interactions" = ["UI_Composition"];
          "UI_Composition_Scenes" = ["UI_Composition"];
          "UI_Core" = ["UI"];
          "UI_Core_AnimationMetrics" = ["UI_Core"];
          "UI_Core_Preview" = ["UI_Core"];
          "UI_Input" = ["UI"];
          "UI_Input_Core" = ["UI_Input"];
          "UI_Input_Inking" = ["UI_Input"];
          "UI_Input_Inking_Analysis" = ["UI_Input_Inking"];
          "UI_Input_Inking_Core" = ["UI_Input_Inking"];
          "UI_Input_Inking_Preview" = ["UI_Input_Inking"];
          "UI_Input_Preview" = ["UI_Input"];
          "UI_Input_Preview_Injection" = ["UI_Input_Preview"];
          "UI_Input_Spatial" = ["UI_Input"];
          "UI_Notifications" = ["UI"];
          "UI_Notifications_Management" = ["UI_Notifications"];
          "UI_Popups" = ["UI"];
          "UI_Shell" = ["UI"];
          "UI_StartScreen" = ["UI"];
          "UI_Text" = ["UI"];
          "UI_Text_Core" = ["UI_Text"];
          "UI_UIAutomation" = ["UI"];
          "UI_UIAutomation_Core" = ["UI_UIAutomation"];
          "UI_ViewManagement" = ["UI"];
          "UI_ViewManagement_Core" = ["UI_ViewManagement"];
          "UI_WebUI" = ["UI"];
          "UI_WebUI_Core" = ["UI_WebUI"];
          "UI_WindowManagement" = ["UI"];
          "UI_WindowManagement_Preview" = ["UI_WindowManagement"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Web_AtomPub" = ["Web"];
          "Web_Http" = ["Web"];
          "Web_Http_Diagnostics" = ["Web_Http"];
          "Web_Http_Filters" = ["Web_Http"];
          "Web_Http_Headers" = ["Web_Http"];
          "Web_Syndication" = ["Web"];
          "Web_UI" = ["Web"];
          "Web_UI_Interop" = ["Web_UI"];
          "Win32_AI" = ["Win32"];
          "Win32_AI_MachineLearning" = ["Win32_AI"];
          "Win32_AI_MachineLearning_DirectML" = ["Win32_AI_MachineLearning"];
          "Win32_AI_MachineLearning_WinML" = ["Win32_AI_MachineLearning"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Data_Xml" = ["Win32_Data"];
          "Win32_Data_Xml_MsXml" = ["Win32_Data_Xml"];
          "Win32_Data_Xml_XmlLite" = ["Win32_Data_Xml"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAccess" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_FunctionDiscovery" = ["Win32_Devices"];
          "Win32_Devices_Geolocation" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_ImageAcquisition" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_CompositionSwapchain" = ["Win32_Graphics"];
          "Win32_Graphics_DXCore" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D_Common" = ["Win32_Graphics_Direct2D"];
          "Win32_Graphics_Direct3D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D10" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11on12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9on12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D_Dxc" = ["Win32_Graphics_Direct3D"];
          "Win32_Graphics_Direct3D_Fxc" = ["Win32_Graphics_Direct3D"];
          "Win32_Graphics_DirectComposition" = ["Win32_Graphics"];
          "Win32_Graphics_DirectDraw" = ["Win32_Graphics"];
          "Win32_Graphics_DirectManipulation" = ["Win32_Graphics"];
          "Win32_Graphics_DirectWrite" = ["Win32_Graphics"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi_Common" = ["Win32_Graphics_Dxgi"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging_D2D" = ["Win32_Graphics_Imaging"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_Audio_Apo" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectMusic" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectSound" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_Endpoints" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_XAudio2" = ["Win32_Media_Audio"];
          "Win32_Media_DeviceManager" = ["Win32_Media"];
          "Win32_Media_DirectShow" = ["Win32_Media"];
          "Win32_Media_DirectShow_Tv" = ["Win32_Media_DirectShow"];
          "Win32_Media_DirectShow_Xml" = ["Win32_Media_DirectShow"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_LibrarySharingServices" = ["Win32_Media"];
          "Win32_Media_MediaFoundation" = ["Win32_Media"];
          "Win32_Media_MediaPlayer" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_PictureAcquisition" = ["Win32_Media"];
          "Win32_Media_Speech" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_MobileBroadband" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkPolicyServer" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectNow" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_BackgroundIntelligentTransferService" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_NetworkListManager" = ["Win32_Networking"];
          "Win32_Networking_RemoteDifferentialCompression" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authentication_Identity_Provider" = ["Win32_Security_Authentication_Identity"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Authorization_UI" = ["Win32_Security_Authorization"];
          "Win32_Security_ConfigurationSnapin" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_Tpm" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DataDeduplication" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_EnhancedStorage" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileServerResourceManager" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_Packaging_Opc" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_VirtualDiskService" = ["Win32_Storage"];
          "Win32_Storage_Vss" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_Storage_Xps_Printing" = ["Win32_Storage_Xps"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_AssessmentTool" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_CallObj" = ["Win32_System_Com"];
          "Win32_System_Com_ChannelCredentials" = ["Win32_System_Com"];
          "Win32_System_Com_Events" = ["Win32_System_Com"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_UI" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_Contacts" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DesktopSharing" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ClrProfiling" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_ActiveScript" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Mmc" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_ParentalControls" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_RealTimeCommunications" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteAssistance" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_ServerBackup" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SettingsManagementInfrastructure" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_SideShow" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_TaskScheduler" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_TransactionServer" = ["Win32_System"];
          "Win32_System_UpdateAgent" = ["Win32_System"];
          "Win32_System_UpdateAssessment" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WinRT" = ["Win32_System"];
          "Win32_System_WinRT_AllJoyn" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Composition" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_CoreInputView" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Direct3D11" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Display" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Graphics" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Graphics_Capture" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Graphics_Direct2D" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Graphics_Imaging" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Holographic" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Isolation" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_ML" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Media" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Metadata" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Pdf" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Printing" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Shell" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Storage" = ["Win32_System_WinRT"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_WindowsSync" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_Animation" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_Controls_RichEdit" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_Ink" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Radial" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Notifications" = ["Win32_UI"];
          "Win32_UI_Ribbon" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_UI_Wpf" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
          "implement" = ["windows-implement" "windows-interface"];
          "windows-implement" = ["dep:windows-implement"];
          "windows-interface" = ["dep:windows-interface"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Memory" "Win32_System_SystemInformation" "default"];
      };
      "windows-core" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = ["Wdk"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Data_Xml" = ["Win32_Data"];
          "Win32_Data_Xml_MsXml" = ["Win32_Data_Xml"];
          "Win32_Data_Xml_XmlLite" = ["Win32_Data_Xml"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAccess" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_FunctionDiscovery" = ["Win32_Devices"];
          "Win32_Devices_Geolocation" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_ImageAcquisition" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_Audio_Apo" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectMusic" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_Endpoints" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_XAudio2" = ["Win32_Media_Audio"];
          "Win32_Media_DeviceManager" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_LibrarySharingServices" = ["Win32_Media"];
          "Win32_Media_MediaPlayer" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Speech" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_MobileBroadband" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkPolicyServer" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectNow" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_BackgroundIntelligentTransferService" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_NetworkListManager" = ["Win32_Networking"];
          "Win32_Networking_RemoteDifferentialCompression" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authentication_Identity_Provider" = ["Win32_Security_Authentication_Identity"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Authorization_UI" = ["Win32_Security_Authorization"];
          "Win32_Security_ConfigurationSnapin" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_Tpm" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DataDeduplication" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_EnhancedStorage" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileServerResourceManager" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_Packaging_Opc" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_VirtualDiskService" = ["Win32_Storage"];
          "Win32_Storage_Vss" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_Storage_Xps_Printing" = ["Win32_Storage_Xps"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_AssessmentTool" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_CallObj" = ["Win32_System_Com"];
          "Win32_System_Com_ChannelCredentials" = ["Win32_System_Com"];
          "Win32_System_Com_Events" = ["Win32_System_Com"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_UI" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_Contacts" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DesktopSharing" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ClrProfiling" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_ActiveScript" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Mmc" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_ParentalControls" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_RealTimeCommunications" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteAssistance" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_ServerBackup" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SettingsManagementInfrastructure" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_TaskScheduler" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UpdateAgent" = ["Win32_System"];
          "Win32_System_UpdateAssessment" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_WindowsSync" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_Animation" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_Controls_RichEdit" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_Ink" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Radial" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Notifications" = ["Win32_UI"];
          "Win32_UI_Ribbon" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_UI_Wpf" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_Registry" "Win32_System_Threading" "Win32_System_Time" "Win32_System_WindowsProgramming" "default"];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default"];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = ["Win32_Foundation"];
          "Wdk_Devices" = ["Wdk"];
          "Wdk_Devices_Bluetooth" = ["Wdk_Devices"];
          "Wdk_Devices_HumanInterfaceDevice" = ["Wdk_Devices"];
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_NetworkManagement" = ["Wdk"];
          "Wdk_NetworkManagement_Ndis" = ["Wdk_NetworkManagement"];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = ["Wdk_NetworkManagement"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_Memory" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Win32" = ["Win32_Foundation"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_TraceLogging" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_SystemInformation" "default"];
      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];
      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = {
              target,
              features,
            }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];
      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];
      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.6.20";
        edition = "2021";
        sha256 = "16y4i8z9vh8hazjxg5mvmq0c5i35wlk8rxi5gkq6cn5vlb0zxh9n";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = ["std" "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size"];
          "default" = ["std"];
          "simd" = ["dep:memchr"];
          "std" = ["alloc" "memchr?/std"];
          "unstable-doc" = ["alloc" "std" "simd" "unstable-recover"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.50.0";
        edition = "2018";
        sha256 = "1cddmp929k882mdh6i9f2as848f13qqna6czwsqzkh1pqnr5fkjj";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            features = ["Win32_Foundation" "Win32_System_Time" "Win32_System_Registry" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug"];
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "serde" = ["dep:serde"];
          "serialization-serde" = ["transactions" "serde"];
        };
      };
      "ws_stream_wasm" = rec {
        crateName = "ws_stream_wasm";
        version = "0.7.4";
        edition = "2018";
        sha256 = "1x9p0zjmk89z0nnpc1qrzm7yfwaz8yj5fqmn4s3q3qvz47sgb6br";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = ["map_pharos"];
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pharos";
            packageId = "pharos";
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = ["BinaryType" "Blob" "console" "MessageEvent" "WebSocket" "CloseEvent" "DomException"];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = ["tokio_io"];
          }
        ];
        features = {
          "tokio_io" = ["async_io_stream/tokio_io"];
        };
      };
      "yansi" = rec {
        crateName = "yansi";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0jdh55jyv0dpd38ij4qh60zglbw9aa8wafqai6m0wa7xaxk3mrfg";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "is-terminal";
            packageId = "is-terminal";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "detect-env" = ["std"];
          "detect-tty" = ["is-terminal" "std"];
          "hyperlink" = ["std"];
          "is-terminal" = ["dep:is-terminal"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "detect-tty" "is-terminal" "std"];
      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.7.35";
        edition = "2018";
        sha256 = "1w36q7b9il2flg0qskapgi9ymgg7p985vniqd09vi0mwib8lz6qv";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = {
              target,
              features,
            }:
              false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = ["alloc" "derive" "simd"];
          "byteorder" = ["dep:byteorder"];
          "default" = ["byteorder"];
          "derive" = ["zerocopy-derive"];
          "simd-nightly" = ["simd"];
          "zerocopy-derive" = ["dep:zerocopy-derive"];
        };
        resolvedDefaultFeatures = ["byteorder" "default" "derive" "simd" "zerocopy-derive"];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.7.35";
        edition = "2018";
        sha256 = "0gnf2ap2y92nwdalzz3x7142f2b83sni66l39vxp2ijd6j080kzs";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /*
     Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      inherit
        (platform.rust.platform)
        arch
        os
        vendor
        ;
      family = platform.rust.platform.target-family;
      env = "gnu";
      endian =
        if platform.parsed.cpu.significantByte.name == "littleEndian"
        then "little"
        else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      debug_assertions = false;
    };

    /*
    Filters common temp files and build files.
    */
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter = name: type: let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName
        == ".gitignore"
        || (type == "directory" && baseName == ".git")
        # Filter out build results
        || (
          type
          == "directory"
          && (
            baseName
            == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )
        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )
        # Filter out IDE config
        || (
          type
          == "directory"
          && (
            baseName == ".idea" || baseName == ".vscode"
          )
        )
        || lib.hasSuffix ".iml" baseName
        # Filter out nix build files
        || baseName == "Cargo.nix"
        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

    /*
     Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
    */
    crateWithTest = {
      crate,
      testCrate,
      testCrateFlags,
      testInputs,
      testPreRun,
      testPostRun,
    }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string"; let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test = let
          drv =
            testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand =
            pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
          pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
            set -e

            export RUST_BACKTRACE=1

            # recreate a file hierarchy as when running tests with cargo

            # the source for test data
            # It's necessary to locate the source in $NIX_BUILD_TOP/source/
            # instead of $NIX_BUILD_TOP/
            # because we compiled those test binaries in the former and not the latter.
            # So all paths will expect source tree to be there and not in the build top directly.
            # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
            # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
            # it's very hard to reason about them.
            # Open a bug if you run into this!
            mkdir -p source/
            cd source/

            ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

            # build outputs
            testRoot=target/debug
            mkdir -p $testRoot

            # executables of the crate
            # we copy to prevent std::env::current_exe() to resolve to a store location
            for i in ${crate}/bin/*; do
              cp "$i" "$testRoot"
            done
            chmod +w -R .

            # test harness executables are suffixed with a hash, like cargo does
            # this allows to prevent name collision with the main
            # executables of the crate
            hash=$(basename $out)
            for file in ${drv}/tests/*; do
              f=$testRoot/$(basename $file)-$hash
              cp $file $f
              ${testCommand}
            done
          '';
      in
        pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru =
            (crate.passthru or {})
            // {
              inherit test;
            };
        }
        (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          '');

    /*
    A restricted overridable version of builtRustCratesWithFeatures.
    */
    buildRustCrateWithFeatures = {
      packageId,
      features ? rootFeatures,
      crateOverrides ? defaultCrateOverrides,
      buildRustCrateForPkgsFunc ? null,
      runTests ? false,
      testCrateFlags ? [],
      testInputs ? [],
      # Any command to run immediatelly before a test is executed.
      testPreRun ? "",
      # Any command run immediatelly after a test is executed.
      testPostRun ? "",
    }:
      lib.makeOverridable
      (
        {
          features,
          crateOverrides,
          runTests,
          testCrateFlags,
          testInputs,
          testPreRun,
          testPostRun,
        }: let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs:
                    (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests
            then
              crateWithTest
              {
                crate = drv;
                testCrate = testDrv;
                inherit testCrateFlags testInputs testPreRun testPostRun;
              }
            else drv;
        in
          derivation
      )
      {inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun;};

    /*
     Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
    */
    builtRustCratesWithFeatures = {
      packageId,
      features,
      crateConfigs ? crates,
      buildRustCrateForPkgsFunc,
      runTests,
      makeTarget ? makeDefaultTarget,
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests); let
        rootPackageId = packageId;
        mergedFeatures =
          mergePackageFeatures
          (
            args
            // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // {test = runTests;};
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs: let
          self = {
            crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
            target = makeTarget stdenv.hostPlatform;
            build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
          };
        in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId: let
          features = mergedFeatures."${packageId}" or [];
          crateConfig' = crateConfigs."${packageId}";
          crateConfig =
            builtins.removeAttrs crateConfig' ["resolvedDefaultFeatures" "devDependencies"];
          devDependencies =
            lib.optionals
            (runTests && packageId == rootPackageId)
            (crateConfig'.devDependencies or []);
          dependencies = dependencyDerivations {
            inherit features;
            inherit (self) target;
            buildByPackageId = depPackageId:
            # proc_macro crates must be compiled for the build architecture
              if crateConfigs.${depPackageId}.procMacro or false
              then self.build.crates.${depPackageId}
              else self.crates.${depPackageId};
            dependencies =
              (crateConfig.dependencies or [])
              ++ devDependencies;
          };
          buildDependencies = dependencyDerivations {
            inherit features;
            inherit (self.build) target;
            buildByPackageId = depPackageId:
              self.build.crates.${depPackageId};
            dependencies = crateConfig.buildDependencies or [];
          };
          dependenciesWithRenames = let
            buildDeps = filterEnabledDependencies {
              inherit features;
              inherit (self) target;
              dependencies = crateConfig.dependencies or [] ++ devDependencies;
            };
            hostDeps = filterEnabledDependencies {
              inherit features;
              inherit (self.build) target;
              dependencies = crateConfig.buildDependencies or [];
            };
          in
            lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
          # Crate renames have the form:
          #
          # {
          #    crate_name = [
          #       { version = "1.2.3"; rename = "crate_name01"; }
          #    ];
          #    # ...
          # }
          crateRenames = let
            grouped =
              lib.groupBy
              (dependency: dependency.name)
              dependenciesWithRenames;
            versionAndRename = dep: let
              package = crateConfigs."${dep.packageId}";
            in {
              inherit (dep) rename;
              inherit (package) version;
            };
          in
            lib.mapAttrs (name: builtins.map versionAndRename) grouped;
        in
          buildRustCrateForPkgsFunc pkgs
          (
            crateConfig
            // {
              src =
                crateConfig.src
                or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
              extraRustcOpts = lib.lists.optional (targetFeatures != []) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit features dependencies buildDependencies crateRenames release;
            }
          );
      in
        builtByPackageIdByPkgs;

    /*
    Returns the actual derivations for the given dependencies.
    */
    dependencyDerivations = {
      buildByPackageId,
      features,
      dependencies,
      target,
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target); let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
        map depDerivation enabledDependencies;

    /*
     Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
    */
    sanitizeForJson = val:
      if builtins.isAttrs val
      then lib.mapAttrs (n: sanitizeForJson) val
      else if builtins.isList val
      then builtins.map sanitizeForJson val
      else if builtins.isFunction val
      then "function"
      else val;

    /*
    Returns various tools to debug a crate.
    */
    debugCrate = {
      packageId,
      target ? makeDefaultTarget stdenv.hostPlatform,
    }:
      assert (builtins.isString packageId); let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree =
            sanitizeForJson
            (
              buildRustCrateWithFeatures {
                buildRustCrateForPkgsFunc = _: crate: {
                  "01_crateName" = crate.crateName or false;
                  "02_features" = crate.features or [];
                  "03_dependencies" = crate.dependencies or [];
                };
                inherit packageId;
              }
            );
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in {internal = debug;};

    /*
     Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures = {
      crateConfigs ? crates,
      packageId,
      target,
    }:
      assert (builtins.isAttrs crateConfigs); let
        prefixValues = prefix: lib.mapAttrs (n: v: {"${prefix}" = v;});
        mergedFeatures =
          prefixValues
          "crate2nix"
          (mergePackageFeatures {
            inherit crateConfigs packageId target;
            features = ["default"];
          });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [mergedFeatures configs];
        onlyInCargo =
          builtins.attrNames
          (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
          (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures =
          lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

    /*
     Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures = {
      crateConfigs ? crates,
      packageId,
      rootPackageId ? packageId,
      features ? rootFeatures,
      dependencyPath ? [crates.${packageId}.crateName],
      featuresByPackageId ? {},
      target,
      # Adds devDependencies to the crate with rootPackageId.
      runTests ? false,
      ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests); let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or []) expandedFeatures;
        depWithResolvedFeatures = dependency: let
          inherit (dependency) packageId;
          features = dependencyFeatures enabledFeatures dependency;
        in {inherit packageId features;};
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies); let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
            (
              cache: {
                packageId,
                features,
              }: let
                cacheFeatures = cache.${packageId} or [];
                combinedFeatures = sortedUnique (cacheFeatures ++ features);
              in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf = let
          cacheFeatures = featuresByPackageId.${packageId} or [];
          combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
        in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
          (
            crateConfig.dependencies
            or []
            ++ lib.optionals
            (runTests && packageId == rootPackageId)
            (crateConfig.devDependencies or [])
          );
        cacheWithAll =
          resolveDependencies
          cacheWithDependencies "build"
          (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

    /*
    Returns the enabled dependencies given the enabled features.
    */
    filterEnabledDependencies = {
      dependencies,
      features,
      target,
    }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
        lib.filter
        (
          dep: let
            targetFunc = dep.target or (features: true);
          in
            targetFunc {inherit features target;}
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
        )
        dependencies;

    /*
    Returns whether the given feature should enable the given dependency.
    */
    doesFeatureEnableDependency = dependency: feature: let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /*
     Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
    */
    expandFeatures = featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures); let
        expandFeaturesNoCycle = oldSeen: inputFeatures:
          if inputFeatures != []
          then let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // {${feature} = 1;};
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or []);
          in
            [feature] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else [];
        outFeatures = expandFeaturesNoCycle {} inputFeatures;
      in
        sortedUnique outFeatures;

    /*
     This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures = dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies); let
        additionalFeatures =
          lib.concatMap
          (
            dependency:
              assert (builtins.isAttrs dependency); let
                enabled = builtins.any (doesFeatureEnableDependency dependency) features;
              in
                if (dependency.optional or false) && enabled
                then [(dependency.rename or dependency.name)]
                else []
          )
          dependencies;
      in
        sortedUnique (features ++ additionalFeatures);

    /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
    */
    dependencyFeatures = features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency); let
        defaultOrNil =
          if dependency.usesDefaultFeatures or true
          then ["default"]
          else [];
        explicitFeatures = dependency.features or [];
        additionalDependencyFeatures = let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature:
            lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
          dependencyFeatures;
      in
        defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    /*
    Sorts and removes duplicates from a list of strings.
    */
    sortedUnique = features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features); let
        outFeaturesSet = lib.foldl (set: feature: set // {"${feature}" = 1;}) {} features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
        builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning = message: value:
      if strictDeprecation
      then builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}
